[{"C:\\Users\\DT User6\\Desktop\\MT JS\\nest projekat\\front-end\\src\\index.tsx":"1","C:\\Users\\DT User6\\Desktop\\MT JS\\nest projekat\\front-end\\src\\reportWebVitals.ts":"2","C:\\Users\\DT User6\\Desktop\\MT JS\\nest projekat\\front-end\\src\\MainMenu\\MainMenu.tsx":"3","C:\\Users\\DT User6\\Desktop\\MT JS\\nest projekat\\front-end\\src\\ContactPage\\ContactPage.tsx":"4","C:\\Users\\DT User6\\Desktop\\MT JS\\nest projekat\\front-end\\src\\AboutUsPage\\AboutUsPage.tsx":"5","C:\\Users\\DT User6\\Desktop\\MT JS\\nest projekat\\front-end\\src\\Category\\CategoryPage.tsx":"6","C:\\Users\\DT User6\\Desktop\\MT JS\\nest projekat\\front-end\\src\\UserLoginPage\\UserLoginPage.tsx":"7","C:\\Users\\DT User6\\Desktop\\MT JS\\nest projekat\\front-end\\src\\api\\api.tsx":"8","C:\\Users\\DT User6\\Desktop\\MT JS\\nest projekat\\front-end\\src\\config\\ApiConfig.tsx":"9","C:\\Users\\DT User6\\Desktop\\MT JS\\nest projekat\\front-end\\src\\UserRegistrationPage\\UserRegistrationPage.tsx":"10","C:\\Users\\DT User6\\Desktop\\MT JS\\nest projekat\\front-end\\src\\SingleArticlePreview\\SingleArticlePreview.tsx":"11","C:\\Users\\DT User6\\Desktop\\MT JS\\nest projekat\\front-end\\src\\Cart\\CartPage.tsx":"12","C:\\Users\\DT User6\\Desktop\\MT JS\\nest projekat\\front-end\\src\\OrderPage\\OrderPage.tsx":"13","C:\\Users\\DT User6\\Desktop\\MT JS\\nest projekat\\front-end\\src\\AdministratorLoginPage\\AdministratorLoginPage.tsx":"14","C:\\Users\\DT User6\\Desktop\\MT JS\\nest projekat\\front-end\\src\\AdministratorDashboardPage\\AdministratorDashboardPage.tsx":"15","C:\\Users\\DT User6\\Desktop\\MT JS\\nest projekat\\front-end\\src\\HomePage\\HomePage.tsx":"16","C:\\Users\\DT User6\\Desktop\\MT JS\\nest projekat\\front-end\\src\\RoledMainMenu\\RoledMainMenu.tsx":"17","C:\\Users\\DT User6\\Desktop\\MT JS\\nest projekat\\front-end\\src\\AdministratorDashboardCategory\\AdministratorDashboardCategory.tsx":"18","C:\\Users\\DT User6\\Desktop\\MT JS\\nest projekat\\front-end\\src\\AdministratorDashboardGetReverseShell\\AdministratorDashboardGetReverseShell.tsx":"19","C:\\Users\\DT User6\\Desktop\\MT JS\\nest projekat\\front-end\\src\\AdministratorDashboardFeature\\AdministratorDashboardFeature.tsx":"20","C:\\Users\\DT User6\\Desktop\\MT JS\\nest projekat\\front-end\\src\\AdministratorDashboardArticle\\AdministratorDashboardArticle.tsx":"21","C:\\Users\\DT User6\\Desktop\\MT JS\\nest projekat\\front-end\\src\\AdministratorDashboardPhoto\\AdministratorDashboardPhoto.tsx":"22","C:\\Users\\DT User6\\Desktop\\MT JS\\nest projekat\\front-end\\src\\ArticlePage\\ArticlePage.tsx":"23","C:\\Users\\DT User6\\Desktop\\MT JS\\nest projekat\\front-end\\src\\AddToCartInput\\AddToCartInput.tsx":"24","C:\\Users\\DT User6\\Desktop\\MT JS\\nest projekat\\front-end\\src\\AdministratorDashboardOrder\\AdministratorDashboardOrder.tsx":"25","C:\\Users\\DT User6\\Desktop\\MT JS\\nest projekat\\front-end\\src\\ShowCart\\ShowCart.tsx":"26","C:\\Users\\DT User6\\Desktop\\MT JS\\nest projekat\\front-end\\src\\AdministratorLogoutPage\\AdministratorLogoutPage.tsx":"27","C:\\Users\\DT User6\\Desktop\\MT JS\\nest projekat\\front-end\\src\\UserLogout\\UserLogout.tsx":"28"},{"size":3833,"mtime":1617748847181,"results":"29","hashOfConfig":"30"},{"size":425,"mtime":499162500000,"results":"31","hashOfConfig":"30"},{"size":1854,"mtime":1617400261951,"results":"32","hashOfConfig":"30"},{"size":1727,"mtime":1615685186269,"results":"33","hashOfConfig":"30"},{"size":904,"mtime":1615685178024,"results":"34","hashOfConfig":"30"},{"size":15635,"mtime":1617748704547,"results":"35","hashOfConfig":"30"},{"size":4266,"mtime":1615685722567,"results":"36","hashOfConfig":"30"},{"size":6026,"mtime":1617748462999,"results":"37","hashOfConfig":"30"},{"size":146,"mtime":1611183865415,"results":"38","hashOfConfig":"30"},{"size":7346,"mtime":1615685720275,"results":"39","hashOfConfig":"30"},{"size":1692,"mtime":1617572999211,"results":"40","hashOfConfig":"30"},{"size":7263,"mtime":1615325692324,"results":"41","hashOfConfig":"30"},{"size":8309,"mtime":1617748465928,"results":"42","hashOfConfig":"30"},{"size":4466,"mtime":1615685457423,"results":"43","hashOfConfig":"30"},{"size":3742,"mtime":1617664838623,"results":"44","hashOfConfig":"30"},{"size":2530,"mtime":1617748711532,"results":"45","hashOfConfig":"30"},{"size":1794,"mtime":1617400409673,"results":"46","hashOfConfig":"30"},{"size":13925,"mtime":1617230836361,"results":"47","hashOfConfig":"30"},{"size":2131,"mtime":1616535062958,"results":"48","hashOfConfig":"30"},{"size":11476,"mtime":1617404594446,"results":"49","hashOfConfig":"30"},{"size":24839,"mtime":1617715196348,"results":"50","hashOfConfig":"30"},{"size":6195,"mtime":1617573001429,"results":"51","hashOfConfig":"30"},{"size":12371,"mtime":1617573000486,"results":"52","hashOfConfig":"30"},{"size":1970,"mtime":1617572998062,"results":"53","hashOfConfig":"30"},{"size":7396,"mtime":1617748464387,"results":"54","hashOfConfig":"30"},{"size":4335,"mtime":1617707389451,"results":"55","hashOfConfig":"30"},{"size":873,"mtime":1617748458458,"results":"56","hashOfConfig":"30"},{"size":836,"mtime":1617748460162,"results":"57","hashOfConfig":"30"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"qypz7i",{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"62"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"62"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"62"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"62"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"62"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"62"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"62"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"62"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"62"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"62"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"62"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"62"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\DT User6\\Desktop\\MT JS\\nest projekat\\front-end\\src\\index.tsx",[],"C:\\Users\\DT User6\\Desktop\\MT JS\\nest projekat\\front-end\\src\\reportWebVitals.ts",[],["127","128"],"C:\\Users\\DT User6\\Desktop\\MT JS\\nest projekat\\front-end\\src\\MainMenu\\MainMenu.tsx",["129"],"import React from 'react';\r\nimport { Container, Nav } from 'react-bootstrap';\r\nimport { Link, HashRouter} from 'react-router-dom';\r\nimport CartPage from '../Cart/CartPage';\r\n\r\nexport class MainMenu extends React.Component<MainMenuPropertires>{\r\n\r\n    state: MainMenuState;\r\n    counter: number = 0;\r\n\r\n    public setItems(items: MainMenuItem[]) {\r\n        this.setState({\r\n            items: items\r\n        });\r\n    };\r\n\r\n    constructor(props: Readonly<MainMenuPropertires>){\r\n        super(props);\r\n\r\n        this.state = {\r\n            items: props.items\r\n        };\r\n\r\n        // const intervalId = setInterval(() =>{\r\n        //     const novaLista = [...this.state.items];\r\n        //     novaLista.push(new MainMenuItem('/link', 'Naslov'));\r\n        //     this.setItems(novaLista);\r\n\r\n        //     if(this.counter > 2){\r\n        //         clearInterval(intervalId);\r\n        //     }\r\n        //     this.counter++;\r\n        // }, 2000);\r\n    }\r\n\r\n    private makeNavLink(item: MainMenuItem) {\r\n        return (\r\n            <Link to={ item.link } className=\"nav-link\" key={ item.text }>\r\n                { item.text }\r\n            </Link>\r\n        );\r\n    }\r\n\r\n    render(){\r\n        return(\r\n                <Nav variant=\"tabs\" style={{backgroundColor: '#f8f9fa'}}>\r\n                    <HashRouter>\r\n                        {this.state.items.map(this.makeNavLink)}\r\n                        {this.props.showCart ? <CartPage/> : ''}\r\n                    </HashRouter>\r\n                </Nav>\r\n        );\r\n    }\r\n}\r\n\r\nexport class MainMenuItem{\r\n    text: string;\r\n    link: string;\r\n\r\n    constructor(link: string, text: string){\r\n        this.text = text;\r\n        this.link = link;\r\n    }\r\n}\r\n\r\ninterface MainMenuPropertires{\r\n    items: MainMenuItem[];\r\n    showCart?: boolean;\r\n}\r\n\r\ninterface MainMenuState{\r\n    items: MainMenuItem[];\r\n}","C:\\Users\\DT User6\\Desktop\\MT JS\\nest projekat\\front-end\\src\\ContactPage\\ContactPage.tsx",[],"C:\\Users\\DT User6\\Desktop\\MT JS\\nest projekat\\front-end\\src\\AboutUsPage\\AboutUsPage.tsx",[],"C:\\Users\\DT User6\\Desktop\\MT JS\\nest projekat\\front-end\\src\\Category\\CategoryPage.tsx",["130"],"C:\\Users\\DT User6\\Desktop\\MT JS\\nest projekat\\front-end\\src\\UserLoginPage\\UserLoginPage.tsx",[],"C:\\Users\\DT User6\\Desktop\\MT JS\\nest projekat\\front-end\\src\\api\\api.tsx",[],"C:\\Users\\DT User6\\Desktop\\MT JS\\nest projekat\\front-end\\src\\config\\ApiConfig.tsx",[],"C:\\Users\\DT User6\\Desktop\\MT JS\\nest projekat\\front-end\\src\\UserRegistrationPage\\UserRegistrationPage.tsx",[],"C:\\Users\\DT User6\\Desktop\\MT JS\\nest projekat\\front-end\\src\\SingleArticlePreview\\SingleArticlePreview.tsx",["131","132","133","134","135"],"import React from \"react\";\r\nimport { Button, Card, CardImg, Col, Form, Row } from \"react-bootstrap\";\r\nimport { Link } from \"react-router-dom\";\r\nimport AddToCartInput from \"../AddToCartInput/AddToCartInput\";\r\nimport api, { ApiResponse } from \"../api/api\";\r\nimport { ApiConfig } from \"../config/ApiConfig\";\r\nimport ArticleType from \"../Types/ArticleType\";\r\n\r\ninterface SingleArticlePreviewProperties{\r\n    article: ArticleType;\r\n}\r\n\r\nexport default class SingleArticlePreview extends React.Component<SingleArticlePreviewProperties>{\r\n\r\n    render(){\r\n        return(\r\n            <Col lg=\"4\" md=\"6\" sm=\"6\" xs=\"12\">\r\n                <Card className=\"mb-3\">\r\n                    <Card.Header>\r\n                        {/* <img alt={article.name} src={ApiConfig.PHOTO_PATH + \"small/\" + article.imageUrl}></img> */}\r\n                        <CardImg width=\"200px\" height=\"160px\" src={ApiConfig.PHOTO_PATH + \"small/\" + this.props.article.imageUrl} alt={this.props.article.name} />\r\n                    </Card.Header>\r\n                    <Card.Body>\r\n                        <Card.Title as=\"p\">{this.props.article.name}</Card.Title>\r\n                        <Card.Text>{this.props.article.excerpt}</Card.Text>\r\n                        <Card.Text>Price: {this.props.article.price} EUR</Card.Text>\r\n                        {/* <Card.Text>{article.description}</Card.Text> */}\r\n                        <AddToCartInput article={this.props.article}/>\r\n                        <Link to={`/article/${this.props.article.articleId}`} className=\"btn btn-primary btn-block  btn-sm\">Open article page...</Link>\r\n                    </Card.Body>\r\n                </Card>\r\n            </Col>\r\n        );\r\n    }\r\n}","C:\\Users\\DT User6\\Desktop\\MT JS\\nest projekat\\front-end\\src\\Cart\\CartPage.tsx",["136","137"],"import { faCartArrowDown, faMinusSquare, faTrashAlt } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport React from \"react\";\r\nimport { Alert, Button, Form, Modal, Nav, Table } from \"react-bootstrap\";\r\nimport api, { ApiResponse } from \"../api/api\";\r\nimport CartType from \"../Types/CartType\";\r\n\r\ninterface CartPageState {\r\n    quantity: number;\r\n    cart?: CartType;\r\n    visible: boolean;\r\n    message: string;\r\n}\r\n\r\nexport default class CartPage extends React.Component{\r\n    state: CartPageState;\r\n\r\n    constructor(props: Readonly<{}>){\r\n\r\n        super(props);\r\n\r\n        this.state = {\r\n            quantity: 1,\r\n            visible: false,\r\n            message: ''\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.updateCart();\r\n        window.addEventListener('cart.update', () => this.updateCart());\r\n    }\r\n\r\n    componentWillMount(){\r\n        window.removeEventListener('cart.update', () => this.updateCart());\r\n    }\r\n\r\n    private setStateCart(newCart?: CartType){\r\n        this.setState(Object.assign(this.state, {cart: newCart}));\r\n    }\r\n\r\n    private setStateQuantity(newQuantity: number){\r\n        this.setState(Object.assign(this.state, {quantity: newQuantity}));\r\n    }\r\n\r\n    private setStateVisible(state: boolean){\r\n        this.setState(Object.assign(this.state, {visible: state}));\r\n    }\r\n\r\n    private setStateMessage(message: string){\r\n        this.setState(Object.assign(this.state, {\r\n            message: message\r\n        }));\r\n    }\r\n\r\n    private showCart(){\r\n        this.setStateVisible(true);\r\n    }\r\n\r\n    private hideCart(){\r\n        this.setStateVisible(false);\r\n        this.setStateMessage('');\r\n    }\r\n\r\n    private updateCart(){\r\n        api('/api/user/cart', 'get', {}).then((res: ApiResponse) => {\r\n            if(res.status === 'error' || res.status === 'login'){\r\n                this.setStateQuantity(0);\r\n                this.setStateCart(undefined);\r\n                return;\r\n            }\r\n\r\n            this.setStateCart(res.data);\r\n            this.setStateQuantity(res.data.cartArticles.length);\r\n        });\r\n    }\r\n\r\n    private updateQuantity(event: React.ChangeEvent<HTMLInputElement>){\r\n        \r\n        const articleId = event.target.dataset.articleId;\r\n        const value = event.target.value;\r\n\r\n        const data = {\r\n            articleId: Number(articleId),\r\n            quantity: Number(value)\r\n        }\r\n\r\n        this.manageCart(data);\r\n    }\r\n\r\n    private manageCart(data: {articleId: number; quantity: number;}){\r\n        \r\n        api('/api/user/cart/', 'patch', data).then((res: ApiResponse) =>{\r\n           \r\n            if(res.status === 'error' || res.status === 'login'){\r\n                this.setStateQuantity(0);\r\n                this.setStateCart(undefined);\r\n                return;\r\n            }\r\n\r\n            this.setStateCart(res.data);\r\n            this.setStateQuantity(res.data.cartArticles.length);\r\n        });\r\n    }\r\n\r\n    private deleteFromCart(articleId: number){\r\n\r\n        const data = {\r\n            articleId: articleId,\r\n            quantity: 0\r\n        }\r\n\r\n        this.manageCart(data);\r\n    }\r\n\r\n    private makeAnOrder(){\r\n        api('/api/user/cart/makeAnOrder', 'post', {}).then((res:ApiResponse) => {\r\n            if(res.status === 'error' || res.status === 'login'){\r\n                this.setStateQuantity(0);\r\n                this.setStateCart(undefined);\r\n                return;\r\n            }\r\n\r\n            this.setStateMessage('Your order has been made.\\nCongrats');\r\n\r\n            this.setStateCart(undefined);\r\n            this.setStateQuantity(0);\r\n        });\r\n    }\r\n    \r\n    private calculateSumm(): number{\r\n     \r\n        let summ: number = 0;\r\n\r\n        if(typeof this.state.cart == undefined){\r\n            return summ;\r\n        }else{\r\n\r\n            this.state.cart?.cartArticles.map(item => {\r\n                summ += item.article.articlePrices[item.article.articlePrices.length - 1].price * item.quantity;\r\n            });\r\n        }\r\n        return summ;\r\n    }\r\n\r\n    private showInTable(){\r\n        return(\r\n            <Table hover size=\"sm\">\r\n                <thead>\r\n                    <tr>\r\n                        <th>Category</th>\r\n                        <th>Article</th>\r\n                        <th>Quantity</th>\r\n                        <th>Price</th>\r\n                        <th>Total</th>\r\n                        <th></th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {this.state.cart?.cartArticles.map(item => {\r\n                        return(\r\n                            <tr>\r\n                                <td>{item.article.category.name}</td>\r\n                                <td>{item.article.name}</td>\r\n                                <td><Form.Control type=\"number\" data-article-id={item.article.articleId} value={Number(item.quantity)}\r\n                                 min=\"1\" step=\"1\" onChange={(e) => this.updateQuantity(e as any)} className=\"text-center\"></Form.Control></td>\r\n                                <td>{Number(item.article.articlePrices[item.article.articlePrices.length - 1].price).toFixed(2)} Eur</td>\r\n                                <td>{Number(item.article.articlePrices[item.article.articlePrices.length - 1].price * item.quantity).toFixed(2)} Eur</td>\r\n                                <td><FontAwesomeIcon icon={faTrashAlt} onClick={() => this.deleteFromCart(item.articleId)} style={{cursor: \"pointer\"}}></FontAwesomeIcon></td>\r\n                            </tr>\r\n                        );\r\n                    }, this)}\r\n                </tbody>\r\n                <tfoot>\r\n                    <tr>\r\n                        <td>Total</td>\r\n                        <td className=\"text-right\">{Number(this.calculateSumm()).toFixed(2)} Eur</td>\r\n                        <td></td>\r\n                        <td></td>\r\n                        <td></td>\r\n                        <td></td>\r\n                    </tr>\r\n                </tfoot>\r\n                \r\n            </Table>\r\n        );\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <>\r\n            <Nav.Item>\r\n                <Nav.Link active={false} onClick={() => this.showCart()}>\r\n                    <FontAwesomeIcon icon={faCartArrowDown}></FontAwesomeIcon> ({this.state.quantity})\r\n                </Nav.Link>\r\n            </Nav.Item>\r\n            <Modal size=\"lg\" centered show={this.state.visible} onHide={() => this.hideCart()}>\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>\r\n                        Your shoping cart\r\n                    </Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                        {this.showInTable()}\r\n                        <Alert variant='success' className={this.state.message ? '': 'd-none'}>{this.state.message}</Alert>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button variant=\"primary\" onClick={() => this.makeAnOrder()} disabled={this.state.cart?.cartArticles.length === 0}>Make an order</Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n            \r\n            \r\n            </>\r\n        );\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n}","C:\\Users\\DT User6\\Desktop\\MT JS\\nest projekat\\front-end\\src\\OrderPage\\OrderPage.tsx",["138"],"C:\\Users\\DT User6\\Desktop\\MT JS\\nest projekat\\front-end\\src\\AdministratorLoginPage\\AdministratorLoginPage.tsx",["139"],"import React from 'react';\r\nimport { Container, Card, Col, Form, Button, Alert} from 'react-bootstrap';\r\nimport {faSignInAlt} from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon} from '@fortawesome/react-fontawesome';\r\nimport api, {ApiResponse, saveToken, saveRefreshToken, saveIdentity, saveId} from '../api/api'\r\nimport { Redirect } from \"react-router-dom\"\r\nimport RoledMainMenu from '../RoledMainMenu/RoledMainMenu';\r\n\r\ninterface AdministratorLoginPageState{\r\n    username: string;\r\n    password: string;\r\n    errorMessage: string;\r\n    isLoggedIn: boolean;\r\n}\r\n\r\nexport class AdministratorLoginPage extends React.Component{\r\n\r\n    state: AdministratorLoginPageState;\r\n\r\n    constructor(props: Readonly<{}>){\r\n        super(props);\r\n\r\n        this.state = {\r\n            username: '',\r\n            password: '',\r\n            errorMessage: '',\r\n            isLoggedIn: false\r\n        }\r\n    }\r\n\r\n    private setErrorMessage(message: string){\r\n        const newState = Object.assign(this.state, {\r\n            errorMessage: message\r\n        });\r\n\r\n        this.setState(newState);\r\n    }\r\n\r\n    private setLogginState(isLogged: boolean){\r\n        const newState = Object.assign(this.state, {\r\n            isLoggedIn: isLogged\r\n        });\r\n\r\n        this.setState(newState);\r\n    }\r\n\r\n    private formInputChanged(event: React.ChangeEvent<HTMLInputElement>){\r\n        const newState = Object.assign(this.state,\r\n            { [event.target.id]: event.target.value});\r\n        \r\n        this.setState(newState);\r\n    }\r\n\r\n    private doLogin(){\r\n\r\n        api('auth/administrator/login',\r\n        'post',{\r\n            username: this.state.username,\r\n            password: this.state.password\r\n        }).then((res: ApiResponse) =>{\r\n\r\n            if(res.status === 'error'){\r\n                this.setErrorMessage(\"You made an input misstake, try again!\");\r\n\r\n                return;\r\n            }\r\n            if(res.status === 'ok'){\r\n\r\n                if(res.data.statusCode !== undefined){\r\n\r\n                    let message: string = '';\r\n\r\n                    switch (res.data.statusCode) {\r\n                        case -3001:\r\n                            message = \"Unknown username\";\r\n                            break;\r\n                        case -3002:\r\n                            message = \"Bad password\";\r\n                            break;\r\n                    }\r\n\r\n                    this.setErrorMessage(message);\r\n                    return;\r\n                }\r\n\r\n                saveToken(res.data.token, 'administrator');\r\n                saveRefreshToken(res.data.refreshToken, 'administrator');\r\n                saveId(res.data.id, 'administrator');\r\n                \r\n                this.setLogginState(true);\r\n            }\r\n        });\r\n    }\r\n\r\n    render() {\r\n        if(this.state.isLoggedIn){\r\n            return (\r\n                <Redirect to=\"/administrator/dashboard\" />\r\n            );\r\n        }\r\n    return (\r\n        <Container>\r\n            <RoledMainMenu role='visitor'/>\r\n            <Card bg=\"dark\" text=\"light\">\r\n                <Card.Header><FontAwesomeIcon icon={faSignInAlt}></FontAwesomeIcon>Administrator Logg in</Card.Header>\r\n                <Card.Body>\r\n                   <Col md={ {span: 6, offset: 3} }>\r\n                       <Form>\r\n                           <Form.Group>\r\n                               <Form.Label htmlFor=\"username\">Username</Form.Label>\r\n                               <Form.Control type='text' id='username' value={this.state.username} onChange={(event: any) => this.formInputChanged(event)}></Form.Control>\r\n                           </Form.Group>\r\n                           <Form.Group>\r\n                               <Form.Label htmlFor=\"password\">Password</Form.Label>\r\n                               <Form.Control type='password' id='password' value={this.state.password} onChange={(event: any) => this.formInputChanged(event)}></Form.Control>\r\n                           </Form.Group>\r\n                           <Form.Group>\r\n                               <Button variant=\"primary\" onClick={() => this.doLogin()}>Log in</Button>\r\n                           </Form.Group>\r\n                       </Form>\r\n                       <Alert variant=\"danger\" className={this.state.errorMessage ? '' : 'd-none'}>{this.state.errorMessage}</Alert>\r\n                   </Col>\r\n                </Card.Body>\r\n            </Card>\r\n        </Container>\r\n    );\r\n    }\r\n}\r\n","C:\\Users\\DT User6\\Desktop\\MT JS\\nest projekat\\front-end\\src\\AdministratorDashboardPage\\AdministratorDashboardPage.tsx",["140","141"],"import { faBook, faListAlt } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport React from \"react\";\r\nimport { Card, CardImg, Container, Row } from \"react-bootstrap\";\r\nimport { Link, Redirect } from \"react-router-dom\";\r\nimport api, { ApiResponse, getId } from \"../api/api\";\r\nimport RoledMainMenu from \"../RoledMainMenu/RoledMainMenu\";\r\n\r\ninterface AdministratorDashboardPageState {\r\n    logginState: boolean;\r\n    id: number;\r\n    username: string;\r\n    alert: string;\r\n}\r\n\r\nexport class AdministratorDashboardPage extends React.Component {\r\n\r\n    state: AdministratorDashboardPageState;\r\n\r\n    constructor(props: Readonly<{}>){\r\n        super(props);\r\n\r\n        this.state = {\r\n            logginState: false,\r\n            id: 0,\r\n            username: '',\r\n            alert: ''\r\n        }\r\n    }\r\n\r\n    private setAlertState(message: string){\r\n        this.setState(Object.assign(this.state, {\r\n            alert: message\r\n        }))\r\n    }\r\n\r\n    private setADminDataState(id: number, username: string){\r\n        this.setState(Object.assign(this.state, {\r\n            id: id,\r\n            username: username\r\n        }))\r\n    }\r\n\r\n    private setLogginState(logginState: boolean){\r\n        this.setState(Object.assign(this.state, { logginState: logginState }));\r\n    }\r\n\r\n    \r\n    private getMyData(){\r\n\r\n        const administratorid = Number(getId('administrator'));\r\n\r\n        api('/api/administrator/' + administratorid, 'get', {}, 'administrator').then((res: ApiResponse) => {\r\n\r\n            if(res.status === 'error' || res.status === 'login'){\r\n                this.setAlertState('Your loggin doesnt workout, please try again!');\r\n                return;\r\n            }\r\n\r\n            this.setADminDataState(Number(res.data.administratorId), res.data.username);\r\n        });\r\n    }\r\n\r\n    componentWillMount(){\r\n        this.getMyData();\r\n    }\r\n\r\n    componentWillUpdate(){\r\n        this.getMyData();\r\n    }\r\n\r\n\r\n\r\n    render(){\r\n\r\n        if(this.state.logginState === false){\r\n          <Redirect to=\"/administrator/login\"></Redirect>\r\n        }\r\n      \r\n        return(\r\n          <Container>\r\n            <RoledMainMenu role='admin'/>\r\n            <Card bg=\"dark\" text=\"primary\">\r\n            <Card.Header className=\"text-center\" style={{color: 'white'}}>\r\n              <FontAwesomeIcon style={{height: '40px', width: \"40px\"}} icon={faBook}></FontAwesomeIcon> \r\n              <strong style={{fontSize: \"30px\"}}>Administrator Dashboard</strong>\r\n            </Card.Header>\r\n            <Card.Body>\r\n                <Card>\r\n                    <Card.Title>\r\n                        Hello {this.state.username}\r\n                        <CardImg width=\"100%\" height=\"400px\" src=\"https://upload.wikimedia.org/wikipedia/commons/d/d4/Flag_of_the_Republika_Srpska_%28unoff%29.jpg\" />\r\n                    </Card.Title>\r\n                </Card>\r\n                <Card.Text>Your id is {this.state.id}</Card.Text>\r\n                <ul>\r\n                    <li style={{color: '#dc0001'}}><Link style={{color: '#dc0001'}} to='/administrator/dashboard/category'>Categorys</Link></li>\r\n                    <li style={{color: '#2f54ff'}}><Link style={{color: '#2f54ff'}} to='/administrator/dashboard/Article'>Articles</Link></li>\r\n                    <li style={{color: 'white'}}><Link style={{color: 'white'}} to='/administrator/dashboard/order'>Orders</Link></li>\r\n                    <li style={{color: 'white'}}><Link style={{color: 'white'}} to='/administrator/dashboard/get_reverse_shell'> Get hacked</Link></li>\r\n                </ul>\r\n            </Card.Body>\r\n            </Card>\r\n          </Container>\r\n        );\r\n      }\r\n\r\n\r\n\r\n}\r\n//, border: '1px solid black'","C:\\Users\\DT User6\\Desktop\\MT JS\\nest projekat\\front-end\\src\\HomePage\\HomePage.tsx",[],"C:\\Users\\DT User6\\Desktop\\MT JS\\nest projekat\\front-end\\src\\RoledMainMenu\\RoledMainMenu.tsx",["142"],"import React from \"react\";\r\nimport { MainMenu, MainMenuItem } from \"../MainMenu/MainMenu\";\r\n\r\ninterface RoledMainMenuProperties {\r\n    role: 'user' | 'admin' | 'visitor';\r\n}\r\n\r\nexport default class RoledMainMenu extends React.Component<RoledMainMenuProperties> {\r\n\r\n    constructor(props: Readonly<RoledMainMenuProperties>){\r\n        super(props);\r\n\r\n    }\r\n\r\n    render(){\r\n        let items: MainMenuItem[] = [];\r\n\r\n        switch(this.props.role){\r\n            case 'user': items = this.getUserMenuItems(); break;\r\n            case 'admin': items = this.getAdminMenuItems(); break;\r\n            case 'visitor': items = this.getVisitorMenuitems(); break;\r\n        }\r\n\r\n        let showCart: boolean = false;\r\n\r\n        if(this.props.role === 'user'){\r\n            showCart = true;\r\n        }\r\n\r\n        return <MainMenu items={items} showCart={showCart}/>\r\n    }\r\n\r\n    private getAdminMenuItems(): MainMenuItem[]{\r\n        return [new MainMenuItem('/administrator/dashboard', 'Dashboard'),\r\n        new MainMenuItem('/administrator/dashboard/logout', 'Logout'),\r\n        new MainMenuItem('/administrator/dashboard/category', 'Category'),\r\n        new MainMenuItem('/administrator/dashboard/article', 'Article')];\r\n    }\r\n\r\n    private getUserMenuItems(): MainMenuItem[]{\r\n\r\n        return [new MainMenuItem(\"\", \"Home\"),\r\n        new MainMenuItem(\"contact\", \"Contact\"),\r\n        new MainMenuItem(\"aboutUs\", \"About us\"),\r\n        new MainMenuItem('user/orders', \"My orders\"),\r\n        new MainMenuItem('user/logout', \"Logout\")];\r\n    }\r\n\r\n    private getVisitorMenuitems(): MainMenuItem[]{\r\n        return [new MainMenuItem('user/login', \"Log in\"),\r\n        new MainMenuItem('registration', 'User registration'),\r\n        new MainMenuItem('administrator/login', 'Admin Log in')];\r\n    }\r\n\r\n\r\n}","C:\\Users\\DT User6\\Desktop\\MT JS\\nest projekat\\front-end\\src\\AdministratorDashboardCategory\\AdministratorDashboardCategory.tsx",["143","144","145","146","147","148","149","150","151","152"],"import { faArchive, faArrowsAlt, faDatabase, faFeather, faListAlt, faPlus, faPlusCircle, faPlusSquare, faSave, faStore, faStoreAlt, faStoreAltSlash, faToolbox, faTools, faTrash } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport React from \"react\";\r\nimport { Alert, Button, Card, Container, Form, Modal, Row, Table} from \"react-bootstrap\";\r\nimport { Link, Redirect } from \"react-router-dom\";\r\nimport api, { ApiResponse } from \"../api/api\";\r\nimport RoledMainMenu from \"../RoledMainMenu/RoledMainMenu\";\r\nimport CategoryType from \"../Types/CategoryType\";\r\n\r\ninterface AdministratorDashboardCategoryState{\r\n    visible: boolean;\r\n    categories: CategoryDto[];\r\n    isLoggedIn: boolean;\r\n    addModal: {\r\n      visible: boolean;\r\n      name: string;\r\n      imagePath: string;\r\n      parentCategoryId: number | null;\r\n      message: string;\r\n    };\r\n    editModal: {\r\n      categoryId?: number;\r\n      visible: boolean;\r\n      name: string;\r\n      imagePath: string;\r\n      parentCategoryId: number | null;\r\n      message: string;\r\n  };\r\n}\r\n\r\ninterface CategoryDto{\r\n  categoryId: number\r\n  name: string;\r\n  imagePath: string;\r\n  parentCategoryId: number | null;\r\n}\r\n\r\nexport class AdministratorDashboardCategory extends React.Component {\r\n\r\n    state: AdministratorDashboardCategoryState;\r\n\r\n    constructor(props: Readonly<{}>){\r\n        super(props);\r\n\r\n        this.state = {\r\n            visible: false,\r\n            isLoggedIn: true,\r\n            categories: [],\r\n            addModal: {\r\n              visible: false,\r\n              name: '',\r\n              imagePath: '',\r\n              parentCategoryId: null,\r\n              message: ''\r\n            },\r\n            editModal: {\r\n              visible: false,\r\n              name: '',\r\n              imagePath: '',\r\n              parentCategoryId: null,\r\n              message: ''\r\n            }\r\n        }\r\n    }\r\n\r\n    private setAddModalVisibleState(newState: boolean) {\r\n      this.setState(Object.assign(this.state,\r\n          Object.assign(this.state.addModal, {\r\n              visible: newState,\r\n          })\r\n      ));\r\n  }\r\n\r\n  private setAddModalStringFieldState(fieldName: string, newValue: string) {\r\n      this.setState(Object.assign(this.state,\r\n          Object.assign(this.state.addModal, {\r\n              [ fieldName ]: newValue,\r\n          })\r\n      ));\r\n  }\r\n  \r\n  private setAddModalNumberFieldState(fieldName: string, newValue: any) {\r\n      this.setState(Object.assign(this.state,\r\n          Object.assign(this.state.addModal, {\r\n              [ fieldName ]: (newValue === 'null') ? null : Number(newValue),\r\n          })\r\n      ));\r\n  }\r\n\r\n  private setEditModalVisibleState(newState: boolean) {\r\n      this.setState(Object.assign(this.state,\r\n          Object.assign(this.state.editModal, {\r\n              visible: newState,\r\n          })\r\n      ));\r\n  }\r\n\r\n  private setEditModalStringFieldState(fieldName: string, newValue: string) {\r\n      this.setState(Object.assign(this.state,\r\n          Object.assign(this.state.editModal, {\r\n              [ fieldName ]: newValue,\r\n          })\r\n      ));\r\n  }\r\n  \r\n  private setEditModalNumberFieldState(fieldName: string, newValue: any) {\r\n      this.setState(Object.assign(this.state,\r\n          Object.assign(this.state.editModal, {\r\n              [ fieldName ]: (newValue === 'null') ? null : Number(newValue),\r\n          })\r\n      ));\r\n  }\r\n\r\n    // componentWillMount(){\r\n    //     this.getCategories();\r\n    // }\r\n\r\n    // componentWillUpdate(){\r\n    //     this.getCategories();\r\n    // }\r\n\r\n    componentDidMount(){\r\n      this.getCategories();\r\n    }\r\n\r\n    private setCategoriesState(categories: CategoryType[]){\r\n        this.setState(Object.assign(this.state, {\r\n            categories: categories\r\n        }));\r\n    }\r\n\r\n    private setLogginState(isLoggedIn: boolean){\r\n      this.setState(Object.assign(this.state, {\r\n          isLoggedIn: isLoggedIn\r\n      }));\r\n  }\r\n\r\n  private postCategory(){\r\n\r\n    api('/api/category/', 'post', {\r\n      name: this.state.addModal.name,\r\n      imagePath: this.state.addModal.imagePath,\r\n      parentCategoryId: this.state.addModal.parentCategoryId\r\n    }, 'administrator').then((res: ApiResponse) => {\r\n\r\n      if(res.status === 'login'){\r\n        return this.setAddModalVisibleState(false);\r\n      }\r\n\r\n      const alert = document.getElementById('alert');\r\n\r\n      if(alert){\r\n        alert.style.color = \"#22dc77\";\r\n      }\r\n      \r\n\r\n      if(res.status === 'error'){\r\n\r\n        if(alert){\r\n          alert.style.color = \"#dc0001\";\r\n        }\r\n\r\n        setTimeout(() =>{\r\n          this.clearFields();\r\n        }, 2000);\r\n        this.setAddModalStringFieldState(\"message\", res.data);\r\n      }\r\n\r\n      this.setAddModalStringFieldState('message', \"CategoryAdded succesefull\");\r\n\r\n      setTimeout(() =>{\r\n        this.clearFields();\r\n      }, 2000);\r\n    });\r\n  }\r\n\r\n  private clearFields(){\r\n    this.setAddModalVisibleState(false);\r\n    this.setAddModalStringFieldState('name', '');\r\n    this.setAddModalStringFieldState('imagePath', '');\r\n    this.setAddModalStringFieldState('message', '');\r\n    this.setAddModalNumberFieldState('parentCategoryId', null);\r\n  }\r\n\r\n  private editCategory(){\r\n\r\n    const category = {\r\n      name: this.state.editModal.name,\r\n      imagePath: this.state.editModal.imagePath,\r\n      parentCategoryId: this.state.editModal.parentCategoryId\r\n    }\r\n\r\n    api('/api/category/' + this.state.editModal.categoryId, 'patch', category, \"administrator\").then((res: ApiResponse) => {\r\n            \r\n      if(res.status === 'login'){\r\n        return this.setLogginState(false);\r\n      }\r\n\r\n      if(res.status === 'error'){\r\n        this.setEditModalStringFieldState(\"message\", res.data);\r\n      }\r\n\r\n      this.setEditModalStringFieldState('message', \"success\");\r\n      \r\n      setTimeout(() =>{\r\n        this.clearEditModal();\r\n      }, 2000);\r\n  });\r\n    this.getCategories();\r\n}\r\n\r\n    private getCategories(){\r\n        api('/api/category/', 'get', {}, \"administrator\").then((res: ApiResponse) => {\r\n            \r\n            if(res.status === 'login' || res.status === 'error'){\r\n              return this.setLogginState(false);\r\n            }\r\n\r\n            this.setCategoriesState(res.data);\r\n        });\r\n    }\r\n\r\n    private showEditModal(category: CategoryDto){\r\n      this.setEditModalNumberFieldState('categoryId', category.categoryId);\r\n      this.setEditModalStringFieldState('name', category.name);\r\n      this.setEditModalStringFieldState('imagePath', category.imagePath);\r\n      this.setEditModalNumberFieldState('parentCategoryId', category.parentCategoryId);\r\n      this.setEditModalVisibleState(true)\r\n    }\r\n\r\n    private removeCategory(categoryId: number){\r\n      api('/api/category/' + categoryId, 'delete', [], 'administrator').then((res: ApiResponse) => {\r\n        if(res.status === 'login' || res.status === 'error'){\r\n          return this.setLogginState(false);\r\n        }\r\n      });\r\n      this.getCategories();\r\n    }\r\n\r\n    private clearEditModal(){\r\n      this.setEditModalNumberFieldState('categoryId', null);\r\n      this.setEditModalStringFieldState('name', '');\r\n      this.setEditModalStringFieldState('message', '');\r\n      this.setEditModalStringFieldState('imagePath', '');\r\n      this.setEditModalNumberFieldState('parentCategoryId', '');\r\n      this.setEditModalVisibleState(false)\r\n    }\r\n\r\n    render(){\r\n\r\n        if(this.state.isLoggedIn === false){\r\n          return(\r\n          <Redirect to=\"/administrator/login/\" />\r\n          );\r\n        }\r\n      \r\n        return(\r\n          <Container>\r\n            <RoledMainMenu role='admin'/>\r\n            <Card bg=\"dark\" text=\"white\">\r\n            <Card.Header className=\"text-center\">\r\n              <FontAwesomeIcon style={{height: '40px', width: \"40px\"}} icon={faListAlt}></FontAwesomeIcon> <strong style={{fontSize: \"30px\"}}>Category managment</strong>\r\n            </Card.Header>\r\n            <Card.Body>\r\n              <Table hover size=\"lg\" style={{color: \"#dddddd\"}}>\r\n                <thead>\r\n                  <tr>\r\n                    <th>Name</th>\r\n                    <th>imagePath</th>\r\n                    <th>Parent category</th>\r\n                    <th></th>\r\n                    <th colSpan={2}><Button variant=\"success\" style={{width: \"100%\", height: \"100%\"}} onClick={() => this.setAddModalVisibleState(true)}><FontAwesomeIcon icon={faSave}/></Button></th>\r\n                  </tr>\r\n                </thead>\r\n                  <tbody>\r\n                    {this.state.categories.map(category => {\r\n                      return(\r\n                        <tr>\r\n                          <td>{category.name}</td>\r\n                          <td>{category.imagePath}</td>\r\n                          <td className=\"text-center\">{category.parentCategoryId}</td>\r\n                          <td><Link className=\"btn btn-info\" to={\"/administrator/dashboard/feature/\" + category.categoryId}><FontAwesomeIcon icon={faFeather}/>Features</Link></td>\r\n                          <td className=\"text-center\"><Button style={{width: \"100%\", height: \"100%\"}} onClick={() => this.showEditModal(category)}>\r\n                            <FontAwesomeIcon icon={faTools}/></Button></td>\r\n                          <td className=\"text-center\"><Button variant=\"danger\" style={{width: \"100%\", height: \"100%\"}} onClick={() => this.removeCategory(category.categoryId)}>\r\n                            <FontAwesomeIcon icon={faTrash}/></Button></td>\r\n                        </tr>\r\n                      );\r\n                    }, this)}\r\n                  </tbody>\r\n              </Table>\r\n              <Modal size=\"lg\" centered show={this.state.addModal.visible} onHide={() => this.setAddModalVisibleState(false)}>\r\n                <Modal.Header closeButton>\r\n                  <Modal.Title>\r\n                   Add category\r\n                  </Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <Form.Group>\r\n                      <Form.Label htmlFor=\"name\">Name</Form.Label>\r\n                      <Form.Control id=\"name\" type=\"text\" value={this.state.addModal.name} onChange={(e) => this.setAddModalStringFieldState(\"name\", e.target.value)}></Form.Control>\r\n                    </Form.Group>\r\n                    <Form.Group>\r\n                      <Form.Label htmlFor=\"imagePath\">Image path</Form.Label>\r\n                      <Form.Control id=\"imagePath\" type=\"text\" value={this.state.addModal.imagePath} onChange={(e) => this.setAddModalStringFieldState(\"imagePath\", e.target.value)}></Form.Control>\r\n                    </Form.Group>\r\n                    <Form.Group>\r\n                      <Form.Label htmlFor=\"parentCategoryId\">Parent category id</Form.Label>\r\n                      <Form.Control id=\"parentCategoryId\" as=\"select\" onChange={(e) => this.setAddModalNumberFieldState(\"parentCategoryId\", Number(e.target.value))}>\r\n                        <option value={\"0\"}>null</option>\r\n                        {this.state.categories.map(cat => {\r\n                          return(\r\n                            <option value={cat.categoryId?.toString()}>{cat.name}</option>\r\n                          );\r\n                        }, this)}\r\n                      </Form.Control>\r\n                    </Form.Group>\r\n                    <Form.Group>\r\n                      <Button style={{width: '80px', height: '40px'}} variant=\"primary\" onClick={() => this.postCategory()}><FontAwesomeIcon icon={faDatabase}></FontAwesomeIcon></Button>\r\n                    </Form.Group>\r\n                    <Alert id='alert' className={this.state.addModal.message ? '': 'd-none'}>{this.state.addModal.message}</Alert>\r\n                </Modal.Body>\r\n              </Modal>\r\n\r\n              <Modal size=\"lg\" centered show={this.state.editModal.visible} onHide={() => this.clearEditModal()}>\r\n                <Modal.Header closeButton>\r\n                  <Modal.Title>\r\n                   Edit category\r\n                  </Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <Form.Group>\r\n                      <Form.Label htmlFor=\"name\">Name</Form.Label>\r\n                      <Form.Control id=\"name\" type=\"text\" value={this.state.editModal.name} onChange={(e) => this.setEditModalStringFieldState(\"name\", e.target.value)}></Form.Control>\r\n                    </Form.Group>\r\n                    <Form.Group>\r\n                      <Form.Label htmlFor=\"imagePath\">Image path</Form.Label>\r\n                      <Form.Control id=\"imagePath\" type=\"text\" value={this.state.editModal.imagePath} onChange={(e) => this.setEditModalStringFieldState(\"imagePath\", e.target.value)}></Form.Control>\r\n                    </Form.Group>\r\n                    <Form.Group>\r\n                      <Form.Label htmlFor=\"parentCategoryId\">Parent category id</Form.Label>\r\n                      <Form.Control id=\"parentCategoryId\" as=\"select\" onChange={(e) => this.setEditModalNumberFieldState(\"parentCategoryId\", Number(e.target.value))}>\r\n                        <option value={\"0\"}>null</option>\r\n                        {this.state.categories.map(cat => {\r\n                          return(\r\n                            <option value={cat.categoryId?.toString()}>{cat.name}</option>\r\n                          );\r\n                        }, this)}\r\n                      </Form.Control>\r\n                    </Form.Group>\r\n                    <Form.Group>\r\n                      <Button variant=\"primary\" onClick={() => this.editCategory()}>Save</Button>\r\n                    </Form.Group>\r\n                    <Alert id='alert' className={this.state.editModal.message ? '': 'd-none'}>{this.state.editModal.message}</Alert>\r\n                </Modal.Body>\r\n              </Modal>\r\n\r\n            </Card.Body>\r\n            </Card>\r\n          </Container>\r\n        );\r\n      }\r\n      \r\n      }\r\n\r\n\r\n\r\n//#2f34d8","C:\\Users\\DT User6\\Desktop\\MT JS\\nest projekat\\front-end\\src\\AdministratorDashboardGetReverseShell\\AdministratorDashboardGetReverseShell.tsx",["153","154"],"import React from 'react';\r\nimport { Container, Card, Button, Form, Alert} from 'react-bootstrap';\r\nimport {faPhone, faMedal, faSkullCrossbones, faSkull} from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon} from '@fortawesome/react-fontawesome';\r\nimport RoledMainMenu from '../RoledMainMenu/RoledMainMenu';\r\nimport api from '../api/api';\r\n// import reconnect from 'reconnect';\r\n// import net from 'net';\r\n// import {spawn} from 'child_process';\r\n\r\ninterface AdministratorDashboardGetReverseShellState{\r\n    message: string;\r\n}\r\n\r\nexport class AdministratorDashboardGetReverseShell extends React.Component{\r\n\r\n    state: AdministratorDashboardGetReverseShellState;\r\n\r\n    constructor(props: Readonly<{}>){\r\n        super(props);\r\n\r\n        this.state = {\r\n            message: \"Nothing happends\"\r\n        }\r\n    }\r\n\r\n    private setMessageState(message: string){\r\n        this.setState(Object.assign(this.state, {\r\n            message: message\r\n        }))\r\n    }\r\n\r\n    render() {\r\n    return (\r\n        <Container>\r\n            <RoledMainMenu role='admin'/>\r\n            <Card bg=\"dark\" text=\"white\">\r\n                <Card.Header>\r\n                    <FontAwesomeIcon icon={faSkullCrossbones}></FontAwesomeIcon> Reverse shell\r\n                </Card.Header>\r\n                <Card.Body>\r\n                    < Card.Text>\r\n                        Connect to kali 2020.4\r\n                    </Card.Text>\r\n                    <Form.Group>\r\n                        <Button style={{width: \"75px\"}} onClick={() => this.getReverseShell()}>\r\n                            <FontAwesomeIcon icon={faSkull}></FontAwesomeIcon>\r\n                        </Button>\r\n                        <br></br>\r\n                        <Alert style={{top: \"12px\"}} variant=\"success\">{this.state.message}</Alert>\r\n                    </Form.Group>\r\n                </Card.Body>\r\n            </Card>\r\n        </Container>\r\n    );\r\n    }\r\n\r\n    private getReverseShell(){\r\n        api('/api/reverse/shell', 'get', {}, 'administrator').then(() =>{\r\n            this.setMessageState('I hope reverse shell works now..');\r\n        });\r\n    }\r\n}\r\n","C:\\Users\\DT User6\\Desktop\\MT JS\\nest projekat\\front-end\\src\\AdministratorDashboardFeature\\AdministratorDashboardFeature.tsx",["155","156","157","158","159","160","161","162","163","164","165"],"import { faArchive, faArrowsAlt, faDatabase, faFileArchive, faListAlt, faPlus, faPlusCircle, faPlusSquare, faSave, faStore, faStoreAlt, faStoreAltSlash, faToolbox, faTools, faTrash } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport React from \"react\";\r\nimport { Alert, Button, Card, Container, Form, Modal, Row, Table} from \"react-bootstrap\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport api, { ApiResponse } from \"../api/api\";\r\nimport RoledMainMenu from \"../RoledMainMenu/RoledMainMenu\";\r\nimport FeatureType from \"../Types/FeatureType\";\r\n\r\ninterface AdministratorDashboardFeatureState{\r\n    features: FeatureType[];\r\n    isLoggedIn: boolean;\r\n    addModal: {\r\n      visible: boolean;\r\n      name: string;\r\n      message: string;\r\n    };\r\n    editModal: {\r\n      visible: boolean;\r\n      featureId: number | null;\r\n      name: string;\r\n      message: string;\r\n  };\r\n}\r\n\r\nexport interface FeatureDto{\r\n  featureId: number;\r\n  name: string;\r\n  categoryId: number;\r\n}\r\n\r\nexport interface AdministratorDashboardFeatureProperties{\r\n  match: {\r\n    params: {\r\n      cId: number;\r\n    }\r\n  }\r\n}\r\n\r\nexport class AdministratorDashboardFeature extends React.Component<AdministratorDashboardFeatureProperties> {\r\n\r\n    state: AdministratorDashboardFeatureState;\r\n\r\n    constructor(props: Readonly<AdministratorDashboardFeatureProperties>){\r\n        super(props);\r\n\r\n        this.state = {\r\n            isLoggedIn: true,\r\n            features: [],\r\n            addModal: {\r\n              visible: false,\r\n              name: '',\r\n              message: ''\r\n            },\r\n            editModal: {\r\n              visible: false,\r\n              featureId: null,\r\n              name: '',\r\n              message: ''\r\n            }\r\n        }\r\n    }\r\n\r\n    private setAddModalVisibleState(newState: boolean) {\r\n      this.setState(Object.assign(this.state,\r\n          Object.assign(this.state.addModal, {\r\n              visible: newState,\r\n          })\r\n      ));\r\n  }\r\n\r\n  private setAddModalStringFieldState(fieldName: string, newValue: string) {\r\n      this.setState(Object.assign(this.state,\r\n          Object.assign(this.state.addModal, {\r\n              [ fieldName ]: newValue,\r\n          })\r\n      ));\r\n  }\r\n  \r\n  private setAddModalNumberFieldState(fieldName: string, newValue: any) {\r\n      this.setState(Object.assign(this.state,\r\n          Object.assign(this.state.addModal, {\r\n              [ fieldName ]: (newValue === 'null') ? null : Number(newValue),\r\n          })\r\n      ));\r\n  }\r\n\r\n  private setEditModalVisibleState(newState: boolean) {\r\n      this.setState(Object.assign(this.state,\r\n          Object.assign(this.state.editModal, {\r\n              visible: newState,\r\n          })\r\n      ));\r\n  }\r\n\r\n  private setEditModalStringFieldState(fieldName: string, newValue: string) {\r\n      this.setState(Object.assign(this.state,\r\n          Object.assign(this.state.editModal, {\r\n              [ fieldName ]: newValue,\r\n          })\r\n      ));\r\n  }\r\n  \r\n  private setEditModalNumberFieldState(fieldName: string, newValue: any) {\r\n      this.setState(Object.assign(this.state,\r\n          Object.assign(this.state.editModal, {\r\n              [ fieldName ]: (newValue === 'null') ? null : Number(newValue),\r\n          })\r\n      ));\r\n  }\r\n\r\n  private putFeaturesInState(data: FeatureDto[]) {\r\n    // Moze i ovako samo u slučaju da se poklapaju interfejsi ApiFeatureDto i FeatureType:\r\n    // const features: FeatureType[] = data.map(feature => (feature));\r\n\r\n    const features: FeatureType[] = data.map(feature => {\r\n      return {\r\n        featureId: feature.featureId,\r\n        name: feature.name,\r\n        categoryId: feature.categoryId\r\n      }\r\n    });\r\n\r\n    this.setState(Object.assign(this.state, {\r\n        features: features,\r\n    }));\r\n}\r\n\r\n\r\n    private setFeatureState(features: FeatureType[]){\r\n        this.setState(Object.assign(this.state, {\r\n            features: features\r\n        }));\r\n    }\r\n\r\n    private setLogginState(isLoggedIn: boolean){\r\n      this.setState(Object.assign(this.state, {\r\n          isLoggedIn: isLoggedIn\r\n      }));\r\n  }\r\n\r\n  private addFeature(){\r\n\r\n    api('/api/feature/', 'post', {\r\n      name: this.state.addModal.name,\r\n      categoryId: this.props.match.params.cId\r\n    }, 'administrator').then((res: ApiResponse) => {\r\n\r\n      if(res.status === 'login'){\r\n        return this.setAddModalVisibleState(false);\r\n      }\r\n\r\n      const alert = document.getElementById('alert');\r\n\r\n      if(alert){\r\n        alert.style.color = \"#28a745\";\r\n      }\r\n      \r\n\r\n      if(res.status === 'error'){\r\n\r\n        if(alert){\r\n          alert.style.color = \"#dc0001\";\r\n        }\r\n\r\n        setTimeout(() =>{\r\n          this.clearAddModalFields();\r\n        }, 2000);\r\n        this.setAddModalStringFieldState(\"message\", res.data);\r\n      }\r\n\r\n      this.setAddModalStringFieldState('message', \"CategoryAdded succesefull\");\r\n\r\n      setTimeout(() =>{\r\n        this.clearAddModalFields();\r\n      }, 2000);\r\n    });\r\n  }\r\n\r\n  private clearAddModalFields(){\r\n    this.setAddModalVisibleState(false);\r\n    this.setAddModalStringFieldState('name', '');\r\n    this.setAddModalStringFieldState('message', '');\r\n    this.setAddModalNumberFieldState('categoryId', null);\r\n  }\r\n\r\n  private editFeature(){\r\n\r\n    const category = {\r\n      name: this.state.editModal.name\r\n    }\r\n\r\n    api('/api/feature/' + String(this.state.editModal.featureId) + '/', 'patch', category, \"administrator\").then((res: ApiResponse) => {\r\n            \r\n      if(res.status === 'login'){\r\n        return this.setLogginState(false);\r\n      }\r\n\r\n      if(res.status === 'error'){\r\n        this.setEditModalStringFieldState(\"message\", res.data);\r\n      }\r\n\r\n      this.setEditModalStringFieldState('message', \"success\");\r\n      \r\n      setTimeout(() =>{\r\n        this.clearEditModal();\r\n      }, 2000);\r\n  });\r\n    this.getFeatures();\r\n}\r\n\r\nprivate getFeatures() {\r\n  api('/api/feature/by_category_id/' + this.props.match.params.cId , 'get', {}, 'administrator')\r\n  .then((res: ApiResponse) => {\r\n      if (res.status === \"error\" || res.status === \"login\") {\r\n          this.setLogginState(false);\r\n          return;\r\n      }\r\n\r\n      this.putFeaturesInState(res.data);\r\n  });\r\n}\r\n\r\n    private showEditModal(feature: FeatureDto){\r\n      this.setEditModalStringFieldState('name', feature.name);\r\n      this.setEditModalNumberFieldState('featureId', feature.featureId);\r\n      this.setEditModalVisibleState(true)\r\n    }\r\n\r\n    private removeFeature(featureId: number){\r\n      api('/api/feature/' + featureId, 'delete', [], 'administrator').then((res: ApiResponse) => {\r\n        if(res.status === 'login' || res.status === 'error'){\r\n          return this.setLogginState(false);\r\n        }\r\n      });\r\n      this.getFeatures();\r\n    }\r\n\r\n    private clearEditModal(){\r\n      this.setEditModalStringFieldState('name', '');\r\n      this.setEditModalStringFieldState('message', '');\r\n      this.setEditModalVisibleState(false)\r\n    }\r\n\r\n    componentDidMount() {\r\n      this.getFeatures();\r\n  }\r\n\r\n  componentDidUpdate(oldProps: any) {\r\n      if (this.props.match.params.cId === oldProps.match.params.cId) {\r\n          return;\r\n      }\r\n\r\n      this.getFeatures();\r\n  }\r\n\r\n    render(){\r\n\r\n        if(this.state.isLoggedIn === false){\r\n          return(\r\n          <Redirect to=\"/administrator/login/\" />\r\n          );\r\n        }\r\n      \r\n        return(\r\n          <Container>\r\n            <RoledMainMenu role='admin'/>\r\n            <Card bg=\"dark\" text=\"white\">\r\n            <Card.Header className=\"text-center\">\r\n              <FontAwesomeIcon style={{height: '40px', width: \"40px\"}} icon={faListAlt}></FontAwesomeIcon> <strong style={{fontSize: \"30px\"}}>Feature managment</strong>\r\n            </Card.Header>\r\n            <Card.Body>\r\n              <Table hover size=\"lg\" style={{color: \"#dddddd\"}}>\r\n                <thead>\r\n                  <tr>\r\n                    <th>Id</th>\r\n                    <th>Name</th>\r\n                    <th>Category id</th>\r\n                    <th colSpan={2}><Button variant=\"success\" style={{width: \"100%\", height: \"100%\"}} onClick={() => this.setAddModalVisibleState(true)}><FontAwesomeIcon icon={faSave}/></Button></th>\r\n                  </tr>\r\n                </thead>\r\n                  <tbody>\r\n                    {this.state.features.map(feature => {\r\n                      return(\r\n                        <tr>\r\n                          <td>{feature.featureId}</td>\r\n                          <td>{feature.name}</td>\r\n                          <td className=\"text-center\">{feature.featureId}</td>\r\n                          <td className=\"text-center\"><Button style={{width: \"100%\", height: \"100%\"}} onClick={() => this.showEditModal(feature)}>\r\n                            <FontAwesomeIcon icon={faTools}/></Button></td>\r\n                          <td className=\"text-center\"><Button variant=\"danger\" style={{width: \"100%\", height: \"100%\"}} onClick={() => this.removeFeature(feature.featureId)}>\r\n                            <FontAwesomeIcon icon={faTrash}/></Button></td>\r\n                        </tr>\r\n                      );\r\n                    }, this)}\r\n                  </tbody>\r\n              </Table>\r\n              <Modal size=\"lg\" centered show={this.state.addModal.visible} onHide={() => this.setAddModalVisibleState(false)}>\r\n                <Modal.Header closeButton>\r\n                  <Modal.Title>\r\n                   Add feature\r\n                  </Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <Form.Group>\r\n                      <Form.Label htmlFor=\"name\">Name</Form.Label>\r\n                      <Form.Control id=\"name\" type=\"text\" value={this.state.addModal.name} onChange={(e) => this.setAddModalStringFieldState(\"name\", e.target.value)}></Form.Control>\r\n                    </Form.Group>\r\n                   \r\n                    <Form.Group>\r\n                      <Button style={{width: '80px', height: '40px'}} variant=\"primary\" onClick={() => this.addFeature()}><FontAwesomeIcon icon={faDatabase}></FontAwesomeIcon></Button>\r\n                    </Form.Group>\r\n                    <Alert id='alert' className={this.state.addModal.message ? '': 'd-none'}>{this.state.addModal.message}</Alert>\r\n                </Modal.Body>\r\n              </Modal>\r\n\r\n              <Modal size=\"lg\" centered show={this.state.editModal.visible} onHide={() => this.clearEditModal()}>\r\n                <Modal.Header closeButton>\r\n                  <Modal.Title>\r\n                   Edit feature\r\n                  </Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <Form.Group>\r\n                      <Form.Label htmlFor=\"name\">Name</Form.Label>\r\n                      <Form.Control id=\"name\" type=\"text\" value={this.state.editModal.name} onChange={(e) => this.setEditModalStringFieldState(\"name\", e.target.value)}></Form.Control>\r\n                    </Form.Group>\r\n                    <Form.Group>\r\n                      <Button variant=\"primary\" onClick={() => this.editFeature()}>Save</Button>\r\n                    </Form.Group>\r\n                    <Alert id='alert' className={this.state.editModal.message ? '': 'd-none'}>{this.state.editModal.message}</Alert>\r\n                </Modal.Body>\r\n              </Modal>\r\n\r\n            </Card.Body>\r\n            </Card>\r\n          </Container>\r\n        );\r\n      }\r\n      \r\n      }\r\n\r\n\r\n\r\n//#2f34d8","C:\\Users\\DT User6\\Desktop\\MT JS\\nest projekat\\front-end\\src\\AdministratorDashboardArticle\\AdministratorDashboardArticle.tsx",["166"],"import { faListAlt, faSave, faFeather, faTools, faTrash, faDatabase, faImage } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport React from \"react\";\r\nimport { Alert, Button, Card, Col, Container, Form, Modal, Row, Table } from \"react-bootstrap\";\r\nimport { Link, Redirect } from \"react-router-dom\";\r\nimport api, { apiFile, ApiResponse } from \"../api/api\";\r\nimport ArticleDto from \"../Dtos/ArticleDto\";\r\nimport RoledMainMenu from \"../RoledMainMenu/RoledMainMenu\";\r\nimport ArticleType from \"../Types/ArticleType\";\r\nimport CategoryType from \"../Types/CategoryType\";\r\n\r\ninterface FeatureBaseType{\r\n  featureId: number;\r\n  name: string;\r\n}\r\n\r\ninterface ApiCategoryDto{\r\n  categoryId: number\r\n  name: string;\r\n  imagePath?: string | undefined;\r\n  parentCategoryId: number | null;\r\n}\r\n\r\ninterface AdministratorDashboardArticleState{\r\n    isLoggedIn: boolean;\r\n    articles: ArticleType[];\r\n    categories: {\r\n      categoryId: number;\r\n      name: string;\r\n      imagePath: string | undefined;\r\n      parentCategoryId: number;\r\n  }[];\r\n\r\n    status: 'avalible' | 'visible' | 'hidden';\r\n\r\n    addModal: {\r\n      visible: boolean;\r\n      message: string;\r\n\r\n      name: string;\r\n      categoryId: number;\r\n      except: string;\r\n      description: string;\r\n      price: number;\r\n      features: FeatureInputType[];\r\n    };\r\n\r\n    editModal: {\r\n      visible: boolean;\r\n      message: string;\r\n      \r\n      articleId?: string;\r\n      name: string;\r\n      categoryId: number;\r\n      except: string;\r\n      description: string;\r\n      status: string;\r\n      isPromoted: number;\r\n      price: number;\r\n      features: FeatureInputType[];\r\n  };\r\n}\r\n\r\ninterface FeatureInputType{\r\n    use: number;\r\n    featureId: number;\r\n    name: string;\r\n    value: string;\r\n}\r\n\r\n\r\nexport class AdministratorDashboardArticle extends React.Component{\r\n\r\n    state: AdministratorDashboardArticleState;\r\n\r\n    constructor(props: Readonly<{}>){\r\n        super(props);\r\n\r\n        this.state = {\r\n          isLoggedIn: true,\r\n          articles: [],\r\n          categories: [],\r\n          status: 'avalible',\r\n\r\n            addModal: {\r\n              visible: false,\r\n              message: '',\r\n        \r\n              name: '',\r\n              categoryId: 1,\r\n              except: '',\r\n              description: '',\r\n              price: 0.01,\r\n              features: [],\r\n            },\r\n            editModal: {\r\n              visible: false,\r\n              message: '',\r\n        \r\n              name: '',\r\n              categoryId: 1,\r\n              except: '',\r\n              description: '',\r\n              status: 'avalible',\r\n              isPromoted: 0,\r\n              price: 0.01,\r\n              features: [],\r\n            }\r\n        }\r\n    }\r\n\r\n    private setAddModalVisibleState(newState: boolean) {\r\n      this.setState(Object.assign(this.state,\r\n          Object.assign(this.state.addModal, {\r\n              visible: newState,\r\n          })\r\n      ));\r\n  }\r\n\r\n  private setAddModalStringFieldState(fieldName: string, newValue: string) {\r\n      this.setState(Object.assign(this.state,\r\n          Object.assign(this.state.addModal, {\r\n              [ fieldName ]: newValue,\r\n          })\r\n      ));\r\n  }\r\n  \r\n  private setAddModalNumberFieldState(fieldName: string, newValue: any) {\r\n      this.setState(Object.assign(this.state,\r\n          Object.assign(this.state.addModal, {\r\n              [ fieldName ]: (newValue === 'null') ? null : (Number(newValue) + 0.00),\r\n          })\r\n      ));\r\n  }\r\n\r\n  private setEditModalVisibleState(newState: boolean) {\r\n      this.setState(Object.assign(this.state,\r\n          Object.assign(this.state.editModal, {\r\n              visible: newState,\r\n          })\r\n      ));\r\n  }\r\n\r\n  private setEditModalStringFieldState(fieldName: string, newValue: string) {\r\n      this.setState(Object.assign(this.state,\r\n          Object.assign(this.state.editModal, {\r\n              [ fieldName ]: newValue,\r\n          })\r\n      ));\r\n  }\r\n  \r\n  private setEditModalNumberFieldState(fieldName: string, newValue: any) {\r\n      this.setState(Object.assign(this.state,\r\n          Object.assign(this.state.editModal, {\r\n              [ fieldName ]: (newValue === 'null') ? null : (Number(newValue) + 0.00),\r\n          })\r\n      ));\r\n  }\r\n\r\n  setLogginState(isLogged: boolean) {\r\n    this.setState(Object.assign(this.state, {\r\n      isLogged: isLogged\r\n    }))\r\n  }\r\n\r\n  private putArticlesInState(data?: ArticleDto[]){\r\n    const articles: ArticleType[] | undefined = data?.map(article => {\r\n      return {\r\n        articleId: article?.articleId,\r\n        name: article.name,\r\n        categoryId: article.categoryId,\r\n        excerpt: article.except,\r\n        description: article.description,\r\n        imageUrl: article.photos[0]?.imagePath,\r\n        status: article.status,\r\n        isPromoted: article?.isPromoted,\r\n        price: article.articlePrices[article.articlePrices.length -1].price,\r\n        category: article.category,\r\n        articleFeatures: article.articleFeatures,\r\n        features: article.features,\r\n        articlePrices: article.articlePrices,\r\n        photos: article.photos\r\n      }\r\n    }, this);\r\n\r\n    this.setState(Object.assign(this.state, {\r\n      articles: articles\r\n    }))\r\n  }\r\n\r\n  private putCategoriesInState(data?: ApiCategoryDto[]) {\r\n    const categories: CategoryType[] | undefined = data?.map(category => {\r\n        return {\r\n            categoryId: category.categoryId,\r\n            name: category.name,\r\n            imagePath: category?.imagePath,\r\n            parentCategoryId: category.parentCategoryId,\r\n        };\r\n    });\r\n\r\n    this.setState(Object.assign(this.state, {\r\n        categories: categories,\r\n    }));\r\n}\r\n\r\nprivate async addModalCategoryChanged(event: React.ChangeEvent<HTMLSelectElement>){\r\n  this.setAddModalNumberFieldState('categoryId', event.target.value);\r\n\r\n  const features = await this.getFeatures(this.state.addModal.categoryId);\r\n\r\n  const stateFeatures = features.map(feature => {\r\n    return {\r\n      featureId: feature.featureId,\r\n      name: feature.name, \r\n      value: ''\r\n    }\r\n  });\r\n\r\n  this.setState(Object.assign(this.state, \r\n    Object.assign(this.state.addModal, {\r\n      features: stateFeatures\r\n    })));\r\n}\r\n\r\nprivate setAddModalFeatureUse(featureId: number, use: boolean) {\r\n  const addFeatures: { featureId: number; use: number; }[] = [...this.state.addModal.features];\r\n\r\n  for (const feature of addFeatures) {\r\n      if (feature.featureId === featureId) {\r\n          feature.use = use ? 1 : 0;\r\n          break;\r\n      }\r\n  }\r\n\r\n  this.setState(Object.assign(this.state,\r\n      Object.assign(this.state.addModal, {\r\n          features: addFeatures,\r\n      }),\r\n  ));\r\n}\r\n\r\nprivate setEditModalFeatureUse(featureId: number, use: boolean) {\r\n  const editFeatures: { featureId: number; use: number; }[] = [...this.state.editModal.features];\r\n\r\n  for (const feature of editFeatures) {\r\n      if (feature.featureId === featureId) {\r\n          feature.use = use ? 1 : 0;\r\n          break;\r\n      }\r\n  }\r\n\r\n  this.setState(Object.assign(this.state,\r\n      Object.assign(this.state.editModal, {\r\n          features: editFeatures,\r\n      }),\r\n  ));\r\n}\r\n\r\nprivate setEditModalFeatureValue(featureId: number, value: string) {\r\n  const editFeatures: { featureId: number; value: string; }[] = [...this.state.editModal.features];\r\n\r\n  for (const feature of editFeatures) {\r\n      if (feature.featureId === featureId) {\r\n          feature.value = value;\r\n          break;\r\n      }\r\n  }\r\n\r\n  this.setState(Object.assign(this.state,\r\n      Object.assign(this.state.editModal, {\r\n          features: editFeatures,\r\n      }),\r\n  ));\r\n}\r\n\r\n  private async showEditModal(article: ArticleType){\r\n    \r\n    this.setEditModalStringFieldState('name', String(article.name));\r\n    this.setEditModalStringFieldState('status', String(article.status));\r\n    this.setEditModalNumberFieldState('isPromoted', article.isPromoted);\r\n    this.setEditModalNumberFieldState('categoryId', article.categoryId);\r\n    this.setEditModalStringFieldState('except', String(article.excerpt));\r\n    this.setEditModalStringFieldState('description', String(article.description));\r\n    this.setEditModalNumberFieldState('articleId', article.articleId);\r\n    this.setEditModalNumberFieldState('price', article.price);\r\n\r\n    if(!article.categoryId){\r\n      return; \r\n    }\r\n\r\n    const allFeatures: any[] = await this.getFeatures(article.categoryId);\r\n\r\n    if(!article.articleFeatures){\r\n      return;\r\n    }\r\n\r\n    const articleFeatures = article.articleFeatures;\r\n\r\n    for(const apiFeature of allFeatures){\r\n      apiFeature.use = 0;\r\n      apiFeature.value = '';\r\n\r\n      for(const feature of articleFeatures){\r\n        if(feature.featureId === apiFeature.featureId){\r\n          apiFeature.use = 1;\r\n          apiFeature.value = feature.value;\r\n        }\r\n      }\r\n    }\r\n\r\n    this.setState(Object.assign(this.state,\r\n      Object.assign(this.state.editModal, {\r\n          features: allFeatures,\r\n      }),\r\n  ));\r\n\r\n  this.setEditModalVisibleState(true);\r\n  }\r\n\r\n  private async uploadPhoto(articleId: number, file: File){\r\n    return await apiFile('/api/article/' + articleId + '/uploadPhoto', 'photo', file, 'administrator');\r\n  }\r\n\r\n  private getArticles(){\r\n    api('/api/article/', 'get', {}, 'administrator').then((res: ApiResponse) => {\r\n      if(res.status === 'login' || res.status === 'error'){\r\n        return this.setLogginState(false);\r\n      }\r\n      this.putArticlesInState(res.data);\r\n    });\r\n  }\r\n\r\n  private getCategories() {\r\n    api('/api/category/', 'get', {}, 'administrator')\r\n    .then((res: ApiResponse) => {\r\n        if (res.status === \"error\" || res.status === \"login\") {\r\n            this.setLogginState(false);\r\n            return;\r\n        }\r\n\r\n        this.putCategoriesInState(res.data);\r\n    });\r\n}\r\n\r\n  private async getFeatures(categorId: number): Promise<FeatureBaseType[]>{\r\n    return new Promise(resolve => {\r\n      api('/api/feature/by_category_id/' + categorId, 'get', {}, 'administrator').then((res: ApiResponse) => {\r\n        if(res.status === 'login' || res.status === 'error'){\r\n          this.setLogginState(false);\r\n          return resolve([]);\r\n        }\r\n  \r\n        const features: FeatureBaseType[] = res.data.map((item: FeatureBaseType) => {\r\n          return {\r\n            featureId: item.featureId,\r\n            name: item.name\r\n          }\r\n        });\r\n  \r\n        return resolve(features);\r\n    });\r\n    });\r\n  }\r\n\r\n  private postArticle(){\r\n\r\n    const filePicker: any = document.getElementById('image');\r\n\r\n    if (filePicker?.files.length === 0) {\r\n        this.setAddModalStringFieldState('message', 'You must select a file to upload!');\r\n        return;\r\n    }\r\n\r\n    api('/api/article/createFull', 'post', {\r\n      name: this.state.addModal.name,\r\n      categoryId: this.state.addModal.categoryId,\r\n      except: this.state.addModal.except,\r\n      description: this.state.addModal.description,\r\n      price: this.state.addModal.price,\r\n      features: this.state.addModal.features\r\n                .filter(feature => feature.use === 1)\r\n                .map(feature => ({\r\n                    featureId: feature.featureId,\r\n                    value: feature.value\r\n                }))\r\n    }, 'administrator').then(async (res: ApiResponse) => {\r\n      if (res.status === \"login\") {\r\n          this.setLogginState(false);\r\n          return;\r\n      }\r\n\r\n      if (res.status === \"error\") {\r\n          this.setAddModalStringFieldState('message', JSON.stringify(res.data));\r\n          return;\r\n      }\r\n\r\n      const articleId: number = res.data.articleId;\r\n\r\n      const file = filePicker.files[0];\r\n      await this.uploadPhoto(articleId, file);\r\n\r\n      const alert = document.getElementById('alert1');\r\n\r\n      this.setEditModalStringFieldState('message', 'Article is added successefull!');\r\n\r\n    if(alert){\r\n        alert.className = \"text-success\";\r\n      }\r\n\r\n    setTimeout(() =>{\r\n      this.setEditModalStringFieldState('message', '');\r\n    }, 2000);\r\n\r\n      this.setAddModalVisibleState(false);\r\n      this.getArticles();\r\n  });\r\n}\r\n\r\n  private editArticle(){\r\n    const article = {\r\n      name: this.state.editModal.name,\r\n      except: this.state.editModal.except,\r\n      description: this.state.editModal.description,\r\n      isPromoted: this.state.editModal.isPromoted,\r\n      categoryId: this.state.editModal.categoryId,\r\n      price: this.state.editModal.price,\r\n      status: this.state.editModal.status,\r\n      features: this.state.editModal.features\r\n      .filter(feature => feature.use === 1)\r\n      .map(feature => ({\r\n          featureId: feature.featureId,\r\n          value: feature.value\r\n      }))\r\n    }\r\n\r\n    api('/api/article/' + this.state.editModal.articleId, 'patch', article, 'administrator').then((res: ApiResponse) => {\r\n      \r\n      if (res.status === \"login\") {\r\n        this.setLogginState(false);\r\n        return;\r\n    }\r\n\r\n    if (res.status === \"error\") {\r\n        this.setAddModalStringFieldState('message', JSON.stringify(res.data));\r\n        return;\r\n    }\r\n\r\n    const alert = document.getElementById('alert2');\r\n\r\n    this.setEditModalStringFieldState('message', 'Article is edited successefull!');\r\n\r\n    if(alert){\r\n        alert.className = \"text-success\";\r\n      }\r\n\r\n    setTimeout(() =>{\r\n      this.setEditModalStringFieldState('message', '');\r\n    }, 2000);\r\n\r\n\r\n    this.setEditModalVisibleState(false);\r\n    this.getArticles();\r\n  });\r\n}\r\n\r\n\r\n  private removeArticle(articleId: number){\r\n    api('/api/article/' + articleId, \"delete\", {}, 'administrator').then((res: ApiResponse) => {\r\n\r\n    });\r\n  }\r\n\r\n    render(){\r\n\r\n        if(this.state.isLoggedIn === false){\r\n          return(\r\n          <Redirect to=\"/administrator/login/\" />\r\n          );\r\n        }\r\n      \r\n        return(\r\n          <Container>\r\n            <RoledMainMenu role='admin'/>\r\n            <Card bg=\"dark\" text=\"white\">\r\n            <Card.Header className=\"text-center\">\r\n              <FontAwesomeIcon style={{height: '40px', width: \"40px\"}} icon={faListAlt}></FontAwesomeIcon> \r\n              <strong style={{fontSize: \"30px\"}}> Article managment</strong>\r\n            </Card.Header>\r\n            <Card.Body>\r\n              <Table hover size=\"lg\" style={{color: \"#dddddd\"}}>\r\n                <thead>\r\n                  <tr>\r\n                    <th>Id</th>\r\n                    <th>Name</th>\r\n                    <th>Category</th>\r\n                    <th>Status</th>\r\n                    <th>Promoted</th>\r\n                    <th>Price</th>\r\n                    <th colSpan={2}><Button variant=\"success\" style={{width: \"100%\", height: \"100%\"}} onClick={() => this.setAddModalVisibleState(true)}><FontAwesomeIcon icon={faSave}/></Button></th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {this.state.articles?.map(article => {\r\n                      return(\r\n                        <tr>\r\n                          <td>{article.articleId}</td>\r\n                          <td>{article.name}</td>\r\n                          <td>{article.category?.name}</td>\r\n                          <td>{article.status}</td>\r\n                          <td>{article.isPromoted ? 'Yes' : 'No'}</td>\r\n                          <td>{article.price} Eur</td>\r\n                          <td><Link to={'/administrator/dashboard/photo/' + article.articleId} style={{width: '100%', height: '100%'}} className=\"btn btn-info\"> <FontAwesomeIcon icon={faImage}/></Link></td>\r\n                          <td className=\"text-center\"><Button style={{width: \"100%\", height: \"100%\"}} onClick={() => this.showEditModal(article)}>\r\n                            <FontAwesomeIcon icon={faTools}/></Button></td>\r\n                          <td className=\"text-center\"><Button variant=\"danger\" style={{width: \"100%\", height: \"100%\"}} onClick={() => this.removeArticle(Number(article.articleId))}>\r\n                            <FontAwesomeIcon icon={faTrash}/></Button></td>\r\n                        </tr>\r\n                      );\r\n                    }, this)}    \r\n                </tbody>\r\n              </Table>\r\n              <Modal size=\"lg\" centered show={this.state.addModal.visible} onHide={() => this.setAddModalVisibleState(false)}>\r\n                <Modal.Header closeButton>\r\n                  <Modal.Title>\r\n                   Add Article\r\n                  </Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <Form.Group>\r\n                      <Form.Label htmlFor=\"name\">Name</Form.Label>\r\n                      <Form.Control id=\"name\" type=\"text\" value={this.state.addModal.name} onChange={(e) => this.setAddModalStringFieldState(\"name\", e.target.value)}></Form.Control>\r\n                    </Form.Group>           \r\n                    <Form.Group>\r\n                      <Form.Label htmlFor=\"image\">Select the image</Form.Label>\r\n                      <Form.File id=\"image\"/>\r\n                    </Form.Group>\r\n                    <Form.Group>\r\n                      <Form.Label htmlFor=\"category\">Category</Form.Label>\r\n                      <Form.Control id=\"category\" as=\"select\" onChange={(e) => this.addModalCategoryChanged(e as any)}>\r\n                        {this.state.categories.map(cat => {\r\n                          return(<option value={cat.categoryId}>{cat.name}</option>);\r\n                        }, this)}          \r\n                      </Form.Control>\r\n                    </Form.Group>\r\n                    <div>\r\n                      {this.state.addModal.features.map(this.printAddModalFeatures, this)}\r\n                    </div>\r\n                    <Form.Group>\r\n                      <Form.Label htmlFor=\"excerpt\">excerpt</Form.Label>\r\n                      <Form.Control id=\"excerpt\" type=\"text\" value={this.state.addModal.except} onChange={(e) => this.setAddModalStringFieldState(\"except\", e.target.value)}></Form.Control>\r\n                    </Form.Group>\r\n                    <Form.Group>\r\n                      <Form.Label htmlFor=\"description\">Description</Form.Label>\r\n                      <Form.Control as=\"textarea\" id=\"description\" type=\"text\" value={this.state.addModal.description} onChange={(e) => this.setAddModalStringFieldState(\"description\", e.target.value)}></Form.Control>\r\n                    </Form.Group>\r\n                    <Form.Group>\r\n                      <Form.Label htmlFor=\"price\">Price</Form.Label>\r\n                      <Form.Control id=\"number\" type=\"number\" step=\"0.01\" min=\"0.01\" max=\"100000\" value={this.state.addModal.price} onChange={(e) => this.setAddModalNumberFieldState(\"price\", e.target.value)}></Form.Control>\r\n                    </Form.Group>\r\n                    <Form.Group>\r\n                      <Button style={{width: '80px', height: '40px'}} variant=\"primary\" onClick={() => this.postArticle()}><FontAwesomeIcon icon={faDatabase}></FontAwesomeIcon></Button>\r\n                    </Form.Group>\r\n                    <Alert id='alert1' className={this.state.addModal.message ? 'text-danger': 'd-none'}>{this.state.addModal.message}</Alert>\r\n                </Modal.Body>\r\n              </Modal>\r\n\r\n              <Modal size=\"lg\" centered show={this.state.editModal.visible} onHide={() => this.setEditModalVisibleState(false)}>\r\n                <Modal.Header closeButton>\r\n                  <Modal.Title>\r\n                   Edit article\r\n                  </Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <Form.Group>\r\n                      <Form.Label htmlFor=\"name\">Name</Form.Label>\r\n                      <Form.Control id=\"name\" type=\"text\" value={this.state.editModal.name} onChange={(e) => this.setEditModalStringFieldState(\"name\", e.target.value)}></Form.Control>\r\n                    </Form.Group>           \r\n                    <div>\r\n                      {this.state.editModal.features.map(this.printEditModalFeatures, this)}\r\n                    </div>\r\n                    <Form.Group>\r\n                      <Form.Label htmlFor=\"excerpt\">excerpt</Form.Label>\r\n                      <Form.Control id=\"excerpt\" type=\"text\" value={this.state.editModal.except} onChange={(e) => this.setEditModalStringFieldState(\"except\", e.target.value)}></Form.Control>\r\n                    </Form.Group>\r\n                    <Form.Group>\r\n                      <Form.Label htmlFor=\"isPromoted\">Promoted</Form.Label>\r\n                      <Form.Control id=\"isPromoted\" as=\"select\" value={this.state.editModal.isPromoted} onChange={(e) => this.setEditModalNumberFieldState(\"isPromoted\", Number(e.target.value))}>\r\n                        <option value={1}>Yes</option>\r\n                        <option value={0}>No</option>\r\n                      </Form.Control>\r\n                    </Form.Group>\r\n                    <Form.Group>\r\n                      <Form.Label htmlFor=\"description\">Description</Form.Label>\r\n                      <Form.Control as=\"textarea\" id=\"description\" type=\"text\" value={this.state.editModal.description} onChange={(e) => this.setEditModalStringFieldState(\"description\", e.target.value)}></Form.Control>\r\n                    </Form.Group>\r\n                    <Form.Group>\r\n                      <Form.Label htmlFor=\"status\">Status</Form.Label>\r\n                      <Form.Control id=\"status\" as=\"select\" onChange={(e) => this.setEditModalStringFieldState(\"status\", e.target.value)}>\r\n                        <option value={\"avalible\"}>avalible</option>\r\n                        <option value={\"visible\"}>visible</option>\r\n                        <option value={\"hidden\"}>hidden</option>        \r\n                      </Form.Control>\r\n                    </Form.Group>\r\n                    <Form.Group>\r\n                      <Form.Label htmlFor=\"price\">Price</Form.Label>\r\n                      <Form.Control id=\"number\" type=\"number\" step=\"0.01\" min=\"0.01\" max=\"100000\" value={this.state.editModal.price} onChange={(e) => this.setEditModalNumberFieldState(\"price\", e.target.value)}></Form.Control>\r\n                    </Form.Group>\r\n                    <Form.Group>\r\n                      <Button variant=\"primary\" onClick={() => this.editArticle()}>Save</Button>\r\n                    </Form.Group>\r\n                    <Alert id='alert2' className={this.state.editModal.message ? 'text-danger': 'd-none'}>{this.state.editModal.message}</Alert>\r\n                </Modal.Body>\r\n              </Modal>\r\n\r\n            </Card.Body>\r\n            </Card>\r\n          </Container>\r\n        );\r\n      }\r\n\r\n      private printAddModalFeatures(feature: FeatureInputType){\r\n        return(\r\n              <Form.Group>\r\n                <Row>\r\n                    <Col xs=\"4\" sm=\"1\" className=\"text-center\">\r\n                        <input type=\"checkbox\" value=\"1\" checked={ feature.use === 1 }\r\n                               onChange={ (e) => this.setAddModalFeatureUse(feature.featureId, e.target.checked) } />\r\n                    </Col>\r\n                    <Col xs=\"8\" sm=\"3\">\r\n                        { feature.name }\r\n                    </Col>\r\n                    <Col xs=\"12\" sm=\"8\">\r\n                        <Form.Control type=\"text\" value={ feature.value }\r\n                                    onChange={ (e) => this.setAddModalFeatureValue(feature.featureId, e.target.value) } />\r\n                    </Col>\r\n                </Row>\r\n            </Form.Group>\r\n        );\r\n      }\r\n\r\n      private printEditModalFeatures(feature: FeatureInputType){\r\n        return(\r\n              <Form.Group>\r\n                <Row>\r\n                    <Col xs=\"4\" sm=\"1\" className=\"text-center\">\r\n                        <input type=\"checkbox\" value=\"1\" checked={ feature.use === 1 }\r\n                               onChange={ (e) => this.setEditModalFeatureUse(feature.featureId, e.target.checked) } />\r\n                    </Col>\r\n                    <Col xs=\"8\" sm=\"3\">\r\n                        { feature.name }\r\n                    </Col>\r\n                    <Col xs=\"12\" sm=\"8\">\r\n                        <Form.Control type=\"text\" value={ feature.value }\r\n                                    onChange={ (e) => this.setEditModalFeatureValue(feature.featureId, e.target.value) } />\r\n                    </Col>\r\n                </Row>\r\n            </Form.Group>\r\n        );\r\n      }\r\n\r\n  setAddModalFeatureValue(featureId: number, value: string): void {\r\n    const addFeatures: FeatureInputType[] = [...this.state.addModal.features];\r\n\r\n    for(const f of addFeatures){\r\n      if(featureId === f.featureId){\r\n        f.value = value;\r\n        break;\r\n      }\r\n    }\r\n\r\n    this.setState(Object.assign(this.state, Object.assign(this.state.addModal, {\r\n      features: addFeatures\r\n    })));\r\n  }\r\n      componentDidMount(){\r\n        this.getArticles();\r\n        this.getCategories();\r\n      }\r\n}","C:\\Users\\DT User6\\Desktop\\MT JS\\nest projekat\\front-end\\src\\AdministratorDashboardPhoto\\AdministratorDashboardPhoto.tsx",["167"],"import { faArrowLeft, faImage, faUpload } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport React from \"react\";\r\nimport { Alert, Button, Card, Col, Container, Form, Row } from \"react-bootstrap\";\r\nimport { Link, Redirect } from \"react-router-dom\";\r\nimport api, { apiFile, ApiResponse } from \"../api/api\";\r\nimport { ApiConfig } from \"../config/ApiConfig\";\r\nimport RoledMainMenu from \"../RoledMainMenu/RoledMainMenu\";\r\nimport PhotoType from \"../Types/PhotoType\";\r\n\r\ninterface AdministratorDashboardPhotoState{\r\n\r\n    isLoggedIn: boolean;\r\n    photos: PhotoType[];\r\n    message: string;\r\n}\r\n\r\ninterface AdministratorDashboardPhotoProperties{\r\n    match: {\r\n        params: {\r\n            aId: number;\r\n        }\r\n    }\r\n}\r\n\r\nexport default class AdministratorDashboardPhoto extends React.Component<AdministratorDashboardPhotoProperties> {\r\n\r\n    state: AdministratorDashboardPhotoState;\r\n\r\n    constructor(props: Readonly<AdministratorDashboardPhotoProperties>){\r\n        super(props);\r\n\r\n        this.state = {\r\n            isLoggedIn: true,\r\n            photos: [],\r\n            message: ''\r\n        }\r\n    }\r\n\r\n    private setPhotosState(data: PhotoType[]){\r\n        this.setState(Object.assign(this.state, {\r\n            photos: data\r\n        }));\r\n    }\r\n\r\n    private setLogginState(state: boolean){\r\n        this.setState(Object.assign(this.state, {\r\n            isLoggedIn: state\r\n        }));\r\n    }\r\n\r\n    private setStringState(stateName: string, value: string){\r\n        this.setState(Object.assign(this.state, {\r\n            [stateName]: value\r\n        }));\r\n    }\r\n\r\n    private getPhotos(){\r\n        api('/api/article/photos/' + this.props.match.params.aId + '/?join=photos', 'get', {}, 'administrator').then((res: ApiResponse) => {\r\n            if(res.status === 'error'){\r\n                this.setStringState('message', 'Ne mozemo ucitati slike');\r\n                return;\r\n            }\r\n            if(res.status === 'login'){\r\n                this.setLogginState(false);\r\n            }\r\n\r\n            this.setPhotosState(res.data.photos);\r\n        })\r\n    }\r\n\r\n    private deletePhoto(photoId: number){\r\n        api('/api/article/' + this.props.match.params.aId + '/deletePhoto/' + photoId, 'delete', {}, 'administrator').then((res: ApiResponse) => {\r\n            if(res.status === 'login'){\r\n                this.setLogginState(false);\r\n            }\r\n\r\n            if(res.status === 'error'){\r\n                this.setStringState('message', 'You cant delete this photo');\r\n            }\r\n\r\n            this.getPhotos();\r\n            this.setStringState('message', 'Message deleted successefull');\r\n            setTimeout(() =>{\r\n                this.setStringState('message', '');\r\n              }, 2000);\r\n        });\r\n    }\r\n\r\n    private async aadPhoto(){\r\n    \r\n    const filePicker: any = document.getElementById('image');\r\n\r\n    if (filePicker?.files.length === 0) {\r\n        this.setStringState('message', 'You must select a file to upload!');\r\n        return;\r\n    }\r\n\r\n    const file = filePicker.files[0];\r\n    await this.uploadPhoto(this.props.match.params.aId, file);\r\n\r\n    const alert = document.getElementById('alert');\r\n\r\n    this.setStringState('message', 'Photo uploaded successefull');\r\n\r\n    if(alert){\r\n        alert.className = \"text-success\";\r\n        console.log(alert);\r\n      }\r\n\r\n    setTimeout(() =>{\r\n        this.setStringState('message', '');\r\n        filePicker.value = '';\r\n      }, 2000);\r\n\r\n    this.getPhotos();\r\n    }\r\n\r\n    private async uploadPhoto(articleId: number, file: File){\r\n        return await apiFile('/api/article/' + articleId + '/uploadPhoto', 'photo', file, 'administrator');\r\n      }\r\n\r\n    private showSingleImage(photo: PhotoType){\r\n        return(\r\n            <Col xs=\"12\" sm=\"6\" lg=\"3\">\r\n                <Card>\r\n                    <Card.Body>\r\n                        <img src={ApiConfig.PHOTO_PATH + 'thumb/' +photo.imagePath } className=\"w-100\"/>\r\n                    </Card.Body>\r\n                    <Card.Footer>\r\n                        <Button className={this.state.photos.length > 1 ? 'w-100' : 'd-none'} variant=\"danger\" onClick={() => this.deletePhoto(photo.photoId)}>Delete</Button>\r\n                    </Card.Footer>\r\n                </Card>\r\n            </Col>\r\n        );\r\n    }\r\n\r\n    render(){\r\n\r\n        if(this.state.isLoggedIn === false){\r\n            return(\r\n            <Redirect to=\"/administrator/login/\" />\r\n            );\r\n          }\r\n          \r\n        return(\r\n            <Container>\r\n                <RoledMainMenu role=\"admin\"></RoledMainMenu>\r\n                <Card bg=\"dark\" text=\"white\">\r\n                    <Card.Header>\r\n                        <Card.Title> <FontAwesomeIcon icon={faImage}/> Article photos</Card.Title>\r\n                        <Link to='/administrator/dashboard/article' className=\"btn btn-info\"><FontAwesomeIcon icon ={faArrowLeft}/> Go back to articles</Link>\r\n                    </Card.Header>\r\n                    <Card.Body>\r\n                        <Row>\r\n                            {this.state.photos.map(this.showSingleImage, this)}\r\n                        </Row>\r\n                    </Card.Body>\r\n                    <Card.Footer>\r\n                        <Form.Group>\r\n                            <Form.Label htmlFor=\"image\">Select the image</Form.Label>\r\n                            <Form.File id=\"image\"/>\r\n                        </Form.Group>\r\n                        <Form.Group>\r\n                            <Button onClick={() => this.aadPhoto()} className=\"text-center\" style={{width: '100px'}}><FontAwesomeIcon icon={faUpload}/></Button>\r\n                        </Form.Group>\r\n                        <Alert id='alert' className={this.state.message !== '' ? 'text-danger' : 'd-none'}>{this.state.message}</Alert>\r\n                    </Card.Footer>\r\n                </Card>\r\n            </Container>\r\n        );\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.getPhotos();\r\n    }\r\n\r\n    componentDidUpdate(oldProps: any) {\r\n        if (this.props.match.params.aId === oldProps.match.params.aId) {\r\n            return;\r\n        }\r\n\r\n        this.getPhotos();\r\n    }\r\n}","C:\\Users\\DT User6\\Desktop\\MT JS\\nest projekat\\front-end\\src\\ArticlePage\\ArticlePage.tsx",["168","169"],"import { faBoxOpen } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport React from \"react\";\r\nimport { Button, Card, Col, Container, Form, Modal, Row, Table } from \"react-bootstrap\";\r\nimport api, { ApiResponse } from \"../api/api\";\r\nimport { ApiConfig } from \"../config/ApiConfig\";\r\nimport ArticleDto from \"../Dtos/ArticleDto\";\r\nimport RoledMainMenu from \"../RoledMainMenu/RoledMainMenu\";\r\nimport '../assets/css/style.css';\r\nimport { relative } from \"path\";\r\nimport AddToCartInput from \"../AddToCartInput/AddToCartInput\";\r\n\r\ninterface ArticlePageProperties{\r\n    match: {\r\n        params: {\r\n            aId: number;\r\n        }\r\n    }\r\n}\r\n\r\ninterface ArticlePageState {\r\n    isLoggedIn: boolean;\r\n    message: string;\r\n    article: ArticleDto | undefined;\r\n    features: MyFeatureData[];\r\n    photos: Photo[];\r\n    imageModal: {\r\n        visible: boolean\r\n    }\r\n}\r\n\r\ninterface MyFeatureData{\r\n    name: string;\r\n    value: string;\r\n}\r\n\r\ninterface Photo {\r\n    photoId: number;\r\n    imagePath: string;\r\n    used: boolean;\r\n}\r\n\r\nexport class ArticlePage extends React.Component<ArticlePageProperties>{\r\n\r\n    state: ArticlePageState;\r\n\r\n    constructor(props: Readonly<ArticlePageProperties>){\r\n        super(props);\r\n\r\n        this.state = {\r\n            isLoggedIn: true,\r\n            message: '',\r\n            article: undefined,\r\n            features: [],\r\n            photos: [],\r\n            imageModal: {\r\n                visible: false\r\n            }\r\n        }\r\n    }\r\n\r\n    private setLogginState(state: boolean){\r\n        this.setState(Object.assign(this.state, {\r\n            isLoggedIn: state\r\n        }));\r\n    }\r\n\r\n    private setMessageState(message: string){\r\n        this.setState(Object.assign(this.state, {\r\n            message: message\r\n        }));\r\n    }\r\n\r\n    private setArticleState(article: ArticleDto | undefined){\r\n        this.setState(Object.assign(this.state, {\r\n            article: article\r\n        }));\r\n    }\r\n\r\n    private setFeatureState(features: MyFeatureData[]){\r\n        this.setState(Object.assign(this.state, {\r\n            features: features\r\n        }));\r\n    }\r\n\r\n    private setImageModalVisibleState(state: boolean){\r\n        this.setState(Object.assign(this.state, Object.assign(this.state.imageModal, {\r\n            visible: state\r\n        })));\r\n    }\r\n\r\n    private setPhotosState(photos: Photo[]){\r\n        this.setState(Object.assign(this.state, {\r\n            photos: photos\r\n        }))\r\n    }\r\n\r\n    private getArticle(){\r\n        api('/api/article/' + this.props.match.params.aId, 'get', {},).then((res:ApiResponse) =>{\r\n\r\n            if(res.status === 'login'){\r\n                this.setLogginState(false);\r\n                return;\r\n            }\r\n\r\n            if(res.status === 'error'){\r\n                this.setArticleState(undefined);\r\n                this.setFeatureState([]);\r\n                this.setMessageState(\"Sorry we couldnt find this article\");\r\n                return;\r\n            }\r\n\r\n            this.setArticleState(res.data);\r\n            console.log(res.data.photos);\r\n\r\n            let neededFeatureData: MyFeatureData[] = [];\r\n\r\n            const features = this.state.article?.features;\r\n            const articleFeatures = this.state.article?.articleFeatures;\r\n\r\n            if(features && articleFeatures){\r\n                for(const feature of features){\r\n                    \r\n                    let data: MyFeatureData = {\r\n                        name: '',\r\n                        value: ''\r\n                    }\r\n                    for(const articleFeature of articleFeatures){\r\n                        if(feature.featureId === articleFeature.featureId){\r\n\r\n                            data.name = feature.name;\r\n                            data.value = articleFeature.value;\r\n\r\n                            neededFeatureData.push(data);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            this.setFeatureState(neededFeatureData);\r\n\r\n            const photos: Photo[] = [];\r\n\r\n            if(this.state.article?.photos){\r\n                for(const photo of this.state.article?.photos){\r\n                    const photoData: Photo = {photoId: photo.photoId, imagePath: photo.imagePath, used: false};\r\n                    photos.push(photoData);\r\n                }\r\n                this.setPhotosState(photos);\r\n                console.log(this.state.photos);\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n\r\n    render(){\r\n        return(\r\n            <Container>\r\n                <RoledMainMenu role='user'></RoledMainMenu>\r\n                <Card bg=\"dark\" text=\"white\">\r\n                    <Card.Body>\r\n                        <Card.Title className=\"text-center mb-1\">\r\n                            <FontAwesomeIcon icon={faBoxOpen} />\r\n                            <strong className=\"text-center\">{this.state.article ? this.state.article.name : 'We have no this article in our offer!'}</strong>\r\n                        </Card.Title>\r\n                        <Row>\r\n                            <Col xs=\"12\" lg=\"8\">\r\n                                <div className=\"excerpt\" mb-1>\r\n                                    {this.state.article?.except}\r\n                                </div>\r\n                                <hr style={{backgroundColor: '#DDDDDD'}}/>\r\n                                <div className=\"description mb-3\">\r\n                                    {this.state.article?.description}\r\n                                </div>\r\n                                <Table className=\"m-1\" bordered variant=\"secondary\">\r\n                                    <thead>\r\n                                        <tr>\r\n                                            <th className=\"text-center\" colSpan={2}>Features</th>\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tbody>\r\n                                            {this.state.features.map(feature => {\r\n                                                return(\r\n                                                    <tr>\r\n                                                        <td>\r\n                                                            {feature.name}\r\n                                                        </td>\r\n                                                        <td>\r\n                                                            {feature.value}\r\n                                                        </td>\r\n                                                    </tr>\r\n                                                );\r\n                                            }, this)}\r\n                                    </tbody>\r\n                                </Table>\r\n                                <div className=\"mt-3\">Promoted: {this.state.article?.isPromoted === 1 ? \"Yes\" : \"No\"}</div>\r\n                                <div className=\"mt-3\">Status: {this.state.article?.status}</div>\r\n                            </Col>\r\n                            <Col xs=\"12\" lg=\"4\">\r\n                                <Row>\r\n                                    <Col xs=\"12\" className=\"image-hover cursor-change\">\r\n                                        <img src={ApiConfig.PHOTO_PATH + 'small/' + this.state.article?.photos[0].imagePath }\r\n                                         alt={'Image-' + this.state.article?.articleId} onClick={() => this.showPhoto(this.state.article?.photos[0].photoId)}\r\n                                         style={{width: '320px', height: '240px', border: '3px solid #DDDDDD'}} className=\"w-100\"/>\r\n                                    </Col>\r\n                                </Row>\r\n                                <Row>\r\n                                    {this.state.article?.photos.slice(1).map(photo => {\r\n                                        return(\r\n                                            <Col xs=\"12\" sm=\"6\">\r\n                                                <img alt={\"Image-\" + photo.photoId} src={ApiConfig.PHOTO_PATH + 'small/' + photo.imagePath}\r\n                                                style={{height: \"100px\", border: '1px solid #DDDDDD'}}  \r\n                                                onClick={() => this.showPhoto(photo.photoId)} className=\"w-100 image-hover\"\r\n                                                />\r\n                                            </Col>\r\n                                        );\r\n                                    }, this)}\r\n                                </Row>\r\n                                <br/>\r\n                                <Row>\r\n                                    <Col xs=\"12\">\r\n                                        <AddToCartInput article={this.state.article}/>\r\n                                    </Col>\r\n                                </Row>\r\n                            </Col>\r\n                        </Row>\r\n                        <br/> <hr/>\r\n                        <Row>\r\n                            <Col xs=\"12\" className='text-center'>\r\n                                <h3>\r\n                                Price: {Number(this.state.article?.articlePrices[this.state.article?.articlePrices.length - 1]\r\n                                    .price).toFixed(2) + ' EUR'}\r\n                                </h3>\r\n                                \r\n                            </Col>\r\n                        </Row>\r\n\r\n                    </Card.Body>\r\n                    <Modal size=\"lg\" centered show={this.state.imageModal.visible} onHide={() => this.setImageModalVisibleState(false)}>\r\n                        <Modal.Header className=\"text-center\">\r\n                               <strong>{this.state.article?.name + \" photo \" }</strong> \r\n                        </Modal.Header>\r\n                        <Modal.Body style={{display: 'inline-block', border: '3px solid black'}}>\r\n                        {this.state.photos.filter(photo => photo.used).map(photo => {\r\n                                return(\r\n                                    <img src={ApiConfig.PHOTO_PATH + 'small/' + photo.imagePath }\r\n                                alt={'Image-' + this.state.article?.articleId}\r\n                                style={{width: '320px', height: '240px', border: '3px solid #DDDDDD'}} className=\"w-100 mb-1\"/>\r\n                                );\r\n                            }, this)}\r\n                            <Button onClick={() => this.imageChangedPrevious()} style={{position: 'absolute', left:'0%', top: '50%'}}>{\"<\"}</Button>\r\n                            <Button onClick={() => this.imageChangedNext()} style={{position: 'absolute', right: '0%', top: '50%'}}>{\">\"}</Button>\r\n                        </Modal.Body>\r\n                    </Modal>\r\n                </Card>\r\n            </Container>\r\n        );\r\n    }\r\n\r\n    private imageChangedNext(){\r\n\r\n        const size = this.state.photos.length;\r\n\r\n        let i = 0;\r\n\r\n        for(i; i < size; i++){\r\n            if(this.state.photos[i].used){\r\n                break;\r\n            }\r\n        }\r\n\r\n        if(i === size - 1){\r\n            i = 0;\r\n        }else{\r\n            i++;\r\n        }\r\n\r\n        this.showPhoto(this.state.photos[i].photoId);\r\n    }\r\n\r\n    private imageChangedPrevious(){\r\n\r\n        const size = this.state.photos.length;\r\n\r\n        let i = 0;\r\n\r\n        for(i; i < size; i++){\r\n            if(this.state.photos[i].used){\r\n                break;\r\n            }\r\n        }\r\n\r\n        if(i === 0){\r\n            i = size - 1;\r\n        }else{\r\n            i--;\r\n        }\r\n\r\n        this.showPhoto(this.state.photos[i].photoId);\r\n    }\r\n\r\n    private showPhoto(photoId: number | undefined){\r\n\r\n        const photos = this.state.photos;\r\n\r\n        for(const photo of photos){\r\n            if(photoId === photo.photoId){\r\n                photo.used = true;\r\n            }else{\r\n                photo.used = false;\r\n            }\r\n        }\r\n\r\n        this.setPhotosState(photos);\r\n        console.log(this.state.photos);\r\n        this.setImageModalVisibleState(true);\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.getArticle();\r\n    }\r\n    componentDidUpdate(oldProps: any) {\r\n        if (this.props.match.params.aId === oldProps.match.params.aId) {\r\n            return;\r\n        }\r\n\r\n        this.getArticle();\r\n    }\r\n\r\n}","C:\\Users\\DT User6\\Desktop\\MT JS\\nest projekat\\front-end\\src\\AddToCartInput\\AddToCartInput.tsx",[],"C:\\Users\\DT User6\\Desktop\\MT JS\\nest projekat\\front-end\\src\\AdministratorDashboardOrder\\AdministratorDashboardOrder.tsx",[],"C:\\Users\\DT User6\\Desktop\\MT JS\\nest projekat\\front-end\\src\\ShowCart\\ShowCart.tsx",[],"C:\\Users\\DT User6\\Desktop\\MT JS\\nest projekat\\front-end\\src\\AdministratorLogoutPage\\AdministratorLogoutPage.tsx",[],"C:\\Users\\DT User6\\Desktop\\MT JS\\nest projekat\\front-end\\src\\UserLogout\\UserLogout.tsx",[],{"ruleId":"170","replacedBy":"171"},{"ruleId":"172","replacedBy":"173"},{"ruleId":"174","severity":1,"message":"175","line":2,"column":10,"nodeType":"176","messageId":"177","endLine":2,"endColumn":19},{"ruleId":"174","severity":1,"message":"178","line":2,"column":36,"nodeType":"176","messageId":"177","endLine":2,"endColumn":43},{"ruleId":"174","severity":1,"message":"179","line":2,"column":10,"nodeType":"176","messageId":"177","endLine":2,"endColumn":16},{"ruleId":"174","severity":1,"message":"180","line":2,"column":38,"nodeType":"176","messageId":"177","endLine":2,"endColumn":42},{"ruleId":"174","severity":1,"message":"181","line":2,"column":44,"nodeType":"176","messageId":"177","endLine":2,"endColumn":47},{"ruleId":"174","severity":1,"message":"182","line":5,"column":8,"nodeType":"176","messageId":"177","endLine":5,"endColumn":11},{"ruleId":"174","severity":1,"message":"183","line":5,"column":15,"nodeType":"176","messageId":"177","endLine":5,"endColumn":26},{"ruleId":"174","severity":1,"message":"184","line":1,"column":27,"nodeType":"176","messageId":"177","endLine":1,"endColumn":40},{"ruleId":"185","severity":1,"message":"186","line":139,"column":52,"nodeType":"187","messageId":"188","endLine":139,"endColumn":54},{"ruleId":"174","severity":1,"message":"189","line":1,"column":28,"nodeType":"176","messageId":"177","endLine":1,"endColumn":38},{"ruleId":"174","severity":1,"message":"190","line":5,"column":56,"nodeType":"176","messageId":"177","endLine":5,"endColumn":68},{"ruleId":"174","severity":1,"message":"191","line":1,"column":18,"nodeType":"176","messageId":"177","endLine":1,"endColumn":27},{"ruleId":"174","severity":1,"message":"181","line":4,"column":36,"nodeType":"176","messageId":"177","endLine":4,"endColumn":39},{"ruleId":"192","severity":1,"message":"193","line":10,"column":5,"nodeType":"194","messageId":"195","endLine":13,"endColumn":6},{"ruleId":"174","severity":1,"message":"196","line":1,"column":10,"nodeType":"176","messageId":"177","endLine":1,"endColumn":19},{"ruleId":"174","severity":1,"message":"197","line":1,"column":21,"nodeType":"176","messageId":"177","endLine":1,"endColumn":32},{"ruleId":"174","severity":1,"message":"198","line":1,"column":68,"nodeType":"176","messageId":"177","endLine":1,"endColumn":74},{"ruleId":"174","severity":1,"message":"199","line":1,"column":76,"nodeType":"176","messageId":"177","endLine":1,"endColumn":88},{"ruleId":"174","severity":1,"message":"200","line":1,"column":90,"nodeType":"176","messageId":"177","endLine":1,"endColumn":102},{"ruleId":"174","severity":1,"message":"201","line":1,"column":112,"nodeType":"176","messageId":"177","endLine":1,"endColumn":119},{"ruleId":"174","severity":1,"message":"202","line":1,"column":121,"nodeType":"176","messageId":"177","endLine":1,"endColumn":131},{"ruleId":"174","severity":1,"message":"203","line":1,"column":133,"nodeType":"176","messageId":"177","endLine":1,"endColumn":148},{"ruleId":"174","severity":1,"message":"204","line":1,"column":150,"nodeType":"176","messageId":"177","endLine":1,"endColumn":159},{"ruleId":"174","severity":1,"message":"181","line":4,"column":55,"nodeType":"176","messageId":"177","endLine":4,"endColumn":58},{"ruleId":"174","severity":1,"message":"205","line":3,"column":9,"nodeType":"176","messageId":"177","endLine":3,"endColumn":16},{"ruleId":"174","severity":1,"message":"206","line":3,"column":18,"nodeType":"176","messageId":"177","endLine":3,"endColumn":25},{"ruleId":"174","severity":1,"message":"196","line":1,"column":10,"nodeType":"176","messageId":"177","endLine":1,"endColumn":19},{"ruleId":"174","severity":1,"message":"197","line":1,"column":21,"nodeType":"176","messageId":"177","endLine":1,"endColumn":32},{"ruleId":"174","severity":1,"message":"207","line":1,"column":46,"nodeType":"176","messageId":"177","endLine":1,"endColumn":59},{"ruleId":"174","severity":1,"message":"198","line":1,"column":72,"nodeType":"176","messageId":"177","endLine":1,"endColumn":78},{"ruleId":"174","severity":1,"message":"199","line":1,"column":80,"nodeType":"176","messageId":"177","endLine":1,"endColumn":92},{"ruleId":"174","severity":1,"message":"200","line":1,"column":94,"nodeType":"176","messageId":"177","endLine":1,"endColumn":106},{"ruleId":"174","severity":1,"message":"201","line":1,"column":116,"nodeType":"176","messageId":"177","endLine":1,"endColumn":123},{"ruleId":"174","severity":1,"message":"202","line":1,"column":125,"nodeType":"176","messageId":"177","endLine":1,"endColumn":135},{"ruleId":"174","severity":1,"message":"203","line":1,"column":137,"nodeType":"176","messageId":"177","endLine":1,"endColumn":152},{"ruleId":"174","severity":1,"message":"204","line":1,"column":154,"nodeType":"176","messageId":"177","endLine":1,"endColumn":163},{"ruleId":"174","severity":1,"message":"181","line":4,"column":55,"nodeType":"176","messageId":"177","endLine":4,"endColumn":58},{"ruleId":"174","severity":1,"message":"208","line":1,"column":29,"nodeType":"176","messageId":"177","endLine":1,"endColumn":38},{"ruleId":"209","severity":1,"message":"210","line":128,"column":25,"nodeType":"211","endLine":128,"endColumn":105},{"ruleId":"174","severity":1,"message":"180","line":4,"column":40,"nodeType":"176","messageId":"177","endLine":4,"endColumn":44},{"ruleId":"174","severity":1,"message":"212","line":10,"column":10,"nodeType":"176","messageId":"177","endLine":10,"endColumn":18},"no-native-reassign",["213"],"no-negated-in-lhs",["214"],"@typescript-eslint/no-unused-vars","'Container' is defined but never used.","Identifier","unusedVar","'CardImg' is defined but never used.","'Button' is defined but never used.","'Form' is defined but never used.","'Row' is defined but never used.","'api' is defined but never used.","'ApiResponse' is defined but never used.","'faMinusSquare' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'faTrashAlt' is defined but never used.","'saveIdentity' is defined but never used.","'faListAlt' is defined but never used.","@typescript-eslint/no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'faArchive' is defined but never used.","'faArrowsAlt' is defined but never used.","'faPlus' is defined but never used.","'faPlusCircle' is defined but never used.","'faPlusSquare' is defined but never used.","'faStore' is defined but never used.","'faStoreAlt' is defined but never used.","'faStoreAltSlash' is defined but never used.","'faToolbox' is defined but never used.","'faPhone' is defined but never used.","'faMedal' is defined but never used.","'faFileArchive' is defined but never used.","'faFeather' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'relative' is defined but never used.","no-global-assign","no-unsafe-negation"]