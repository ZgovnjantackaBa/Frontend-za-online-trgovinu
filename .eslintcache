[{"C:\\Users\\DT User6\\Desktop\\MT JS\\nest projekat\\front-end\\src\\index.tsx":"1","C:\\Users\\DT User6\\Desktop\\MT JS\\nest projekat\\front-end\\src\\reportWebVitals.ts":"2","C:\\Users\\DT User6\\Desktop\\MT JS\\nest projekat\\front-end\\src\\MainMenu\\MainMenu.tsx":"3","C:\\Users\\DT User6\\Desktop\\MT JS\\nest projekat\\front-end\\src\\ContactPage\\ContactPage.tsx":"4","C:\\Users\\DT User6\\Desktop\\MT JS\\nest projekat\\front-end\\src\\AboutUsPage\\AboutUsPage.tsx":"5","C:\\Users\\DT User6\\Desktop\\MT JS\\nest projekat\\front-end\\src\\Category\\CategoryPage.tsx":"6","C:\\Users\\DT User6\\Desktop\\MT JS\\nest projekat\\front-end\\src\\UserLoginPage\\UserLoginPage.tsx":"7","C:\\Users\\DT User6\\Desktop\\MT JS\\nest projekat\\front-end\\src\\api\\api.tsx":"8","C:\\Users\\DT User6\\Desktop\\MT JS\\nest projekat\\front-end\\src\\config\\ApiConfig.tsx":"9","C:\\Users\\DT User6\\Desktop\\MT JS\\nest projekat\\front-end\\src\\UserRegistrationPage\\UserRegistrationPage.tsx":"10","C:\\Users\\DT User6\\Desktop\\MT JS\\nest projekat\\front-end\\src\\SingleArticlePreview\\SingleArticlePreview.tsx":"11","C:\\Users\\DT User6\\Desktop\\MT JS\\nest projekat\\front-end\\src\\Cart\\CartPage.tsx":"12","C:\\Users\\DT User6\\Desktop\\MT JS\\nest projekat\\front-end\\src\\OrderPage\\OrderPage.tsx":"13","C:\\Users\\DT User6\\Desktop\\MT JS\\nest projekat\\front-end\\src\\AdministratorLoginPage\\AdministratorLoginPage.tsx":"14","C:\\Users\\DT User6\\Desktop\\MT JS\\nest projekat\\front-end\\src\\AdministratorDashboardPage\\AdministratorDashboardPage.tsx":"15","C:\\Users\\DT User6\\Desktop\\MT JS\\nest projekat\\front-end\\src\\HomePage\\HomePage.tsx":"16","C:\\Users\\DT User6\\Desktop\\MT JS\\nest projekat\\front-end\\src\\RoledMainMenu\\RoledMainMenu.tsx":"17","C:\\Users\\DT User6\\Desktop\\MT JS\\nest projekat\\front-end\\src\\AdministratorDashboardCategory\\AdministratorDashboardCategory.tsx":"18","C:\\Users\\DT User6\\Desktop\\MT JS\\nest projekat\\front-end\\src\\AdministratorDashboardGetReverseShell\\AdministratorDashboardGetReverseShell.tsx":"19"},{"size":2552,"mtime":1615986449438,"results":"20","hashOfConfig":"21"},{"size":425,"mtime":499162500000,"results":"22","hashOfConfig":"21"},{"size":1817,"mtime":1615685192429,"results":"23","hashOfConfig":"21"},{"size":1727,"mtime":1615685186269,"results":"24","hashOfConfig":"21"},{"size":904,"mtime":1615685178024,"results":"25","hashOfConfig":"21"},{"size":15546,"mtime":1615986455378,"results":"26","hashOfConfig":"21"},{"size":4266,"mtime":1615685722567,"results":"27","hashOfConfig":"21"},{"size":4295,"mtime":1615640631329,"results":"28","hashOfConfig":"21"},{"size":146,"mtime":1611183865415,"results":"29","hashOfConfig":"21"},{"size":7346,"mtime":1615685720275,"results":"30","hashOfConfig":"21"},{"size":3114,"mtime":1615065000533,"results":"31","hashOfConfig":"21"},{"size":7263,"mtime":1615325692324,"results":"32","hashOfConfig":"21"},{"size":8980,"mtime":1615691189733,"results":"33","hashOfConfig":"21"},{"size":4466,"mtime":1615685457423,"results":"34","hashOfConfig":"21"},{"size":3831,"mtime":1616026537543,"results":"35","hashOfConfig":"21"},{"size":2533,"mtime":1615761146736,"results":"36","hashOfConfig":"21"},{"size":1868,"mtime":1615815306087,"results":"37","hashOfConfig":"21"},{"size":13711,"mtime":1616026645684,"results":"38","hashOfConfig":"21"},{"size":2130,"mtime":1615991665538,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"1lxwktz",{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"42"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"42"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"42"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"69"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"42"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"42"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"42"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"42"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"42"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"42"},"C:\\Users\\DT User6\\Desktop\\MT JS\\nest projekat\\front-end\\src\\index.tsx",[],["90","91"],"C:\\Users\\DT User6\\Desktop\\MT JS\\nest projekat\\front-end\\src\\reportWebVitals.ts",[],"C:\\Users\\DT User6\\Desktop\\MT JS\\nest projekat\\front-end\\src\\MainMenu\\MainMenu.tsx",["92"],"import React from 'react';\r\nimport { Container, Nav } from 'react-bootstrap';\r\nimport { Link, HashRouter} from 'react-router-dom';\r\nimport CartPage from '../Cart/CartPage';\r\n\r\nexport class MainMenu extends React.Component<MainMenuPropertires>{\r\n\r\n    state: MainMenuState;\r\n    counter: number = 0;\r\n\r\n    public setItems(items: MainMenuItem[]) {\r\n        this.setState({\r\n            items: items\r\n        });\r\n    };\r\n\r\n    constructor(props: Readonly<MainMenuPropertires>){\r\n        super(props);\r\n\r\n        this.state = {\r\n            items: props.items\r\n        };\r\n\r\n        // const intervalId = setInterval(() =>{\r\n        //     const novaLista = [...this.state.items];\r\n        //     novaLista.push(new MainMenuItem('/link', 'Naslov'));\r\n        //     this.setItems(novaLista);\r\n\r\n        //     if(this.counter > 2){\r\n        //         clearInterval(intervalId);\r\n        //     }\r\n        //     this.counter++;\r\n        // }, 2000);\r\n    }\r\n\r\n    private makeNavLink(item: MainMenuItem) {\r\n        return (\r\n            <Link to={ item.link } className=\"nav-link\" key={ item.text }>\r\n                { item.text }\r\n            </Link>\r\n        );\r\n    }\r\n\r\n    render(){\r\n        return(\r\n                <Nav variant=\"tabs\">\r\n                    <HashRouter>\r\n                        {this.state.items.map(this.makeNavLink)}\r\n                        {this.props.showCart ? <CartPage/> : ''}\r\n                    </HashRouter>\r\n                </Nav>\r\n        );\r\n    }\r\n}\r\n\r\nexport class MainMenuItem{\r\n    text: string;\r\n    link: string;\r\n\r\n    constructor(link: string, text: string){\r\n        this.text = text;\r\n        this.link = link;\r\n    }\r\n}\r\n\r\ninterface MainMenuPropertires{\r\n    items: MainMenuItem[];\r\n    showCart?: boolean;\r\n}\r\n\r\ninterface MainMenuState{\r\n    items: MainMenuItem[];\r\n}","C:\\Users\\DT User6\\Desktop\\MT JS\\nest projekat\\front-end\\src\\ContactPage\\ContactPage.tsx",[],"C:\\Users\\DT User6\\Desktop\\MT JS\\nest projekat\\front-end\\src\\AboutUsPage\\AboutUsPage.tsx",[],"C:\\Users\\DT User6\\Desktop\\MT JS\\nest projekat\\front-end\\src\\Category\\CategoryPage.tsx",["93"],"import React from 'react';\r\nimport {Container, Card, Row, Col, CardImg, Form, Button} from 'react-bootstrap';\r\nimport {faArchway, faListAlt, faSearch} from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon} from '@fortawesome/react-fontawesome';\r\nimport CategoryType from '../Types/CategoryType';\r\nimport api, { ApiResponse } from '../api/api';\r\nimport ArticleType from '../Types/ArticleType';\r\nimport { Link, Redirect } from 'react-router-dom';\r\nimport SingleArticlePreview from '../SingleArticlePreview/SingleArticlePreview';\r\nimport RoledMainMenu from '../RoledMainMenu/RoledMainMenu';\r\n\r\ninterface CategoryPageProperties{\r\n    match: {\r\n        params: {\r\n            id: number;\r\n        }\r\n    }\r\n}\r\n\r\ninterface CategoryPageState{\r\n    category?: CategoryType;\r\n    articles?: ArticleType[];\r\n    message?: string;\r\n    subcategories?: CategoryType[];\r\n    isLoggedIn: boolean;\r\n    filters: {\r\n        keywords: string;\r\n        priceMin: number;\r\n        priceMax: number;\r\n        order: \"name asc\" | \"name desc\" | \"price asc\" | \"price desc\";\r\n        selectedFeatures: {\r\n            featureId: number;\r\n            value: string;\r\n        }[];\r\n    };\r\n    features: {\r\n        featureId: number;\r\n        name: string;\r\n        values: string[];\r\n    }[];\r\n}\r\n\r\ninterface CategoryDto{\r\n    categoryId: number;\r\n    name: string;\r\n}\r\n\r\ninterface ArticleDto{\r\n    articleId: number;\r\n    name: string;\r\n    excerpt: string;\r\n    description: string;\r\n    articlePrices:{\r\n        price?: number,\r\n        createdAt?: string\r\n    }[],\r\n    photos: {\r\n        imagePath: string\r\n    }[]\r\n}\r\n\r\nexport default class CategoryPage extends React.Component<CategoryPageProperties>{\r\n\r\n    state: CategoryPageState;\r\n\r\n    constructor(props: Readonly<CategoryPageProperties>){\r\n        super(props);\r\n\r\n        this.state = {\r\n            isLoggedIn: false,\r\n            filters: {\r\n                keywords: \"\",\r\n                priceMin: 0.01,\r\n                priceMax: 100000,\r\n                order: \"price asc\",\r\n                selectedFeatures: []\r\n            },\r\n            features: []\r\n        };\r\n    }\r\n\r\n    private setLogginState(isLoggedIn: boolean){\r\n        const newState = Object.assign(this.state,\r\n            { isLoggedIn: isLoggedIn });\r\n\r\n            this.setState(newState);\r\n    }\r\n\r\n    private printOptionalMessage(){\r\n        if(this.state.message !== ''){\r\n            return(\r\n                <Card.Text>{this.state.message}</Card.Text>\r\n            );\r\n        }\r\n    }\r\n\r\n    private setSubcategories(subcategories: CategoryType[]){\r\n\r\n        const newState = Object.assign(this.state, {\r\n            subcategories: subcategories\r\n        })\r\n\r\n        this.setState(newState);\r\n    }\r\n\r\n    private setArticles(articles: ArticleType[]){\r\n\r\n        const newState = Object.assign(this.state, {\r\n            articles: articles\r\n        })\r\n\r\n        this.setState(newState);\r\n    }\r\n\r\n    private setMessage(message: string){\r\n\r\n        const newState = Object.assign(this.state, {\r\n            message: message\r\n        })\r\n\r\n        this.setState(newState);\r\n    }\r\n\r\n    private setCategoryData(categoryData: CategoryType){\r\n\r\n        const newState = Object.assign(this.state, {\r\n            category: categoryData\r\n        })\r\n\r\n        this.setState(newState);\r\n    }\r\n\r\n    private setFeatures(features: {featureID: number; name: string; values: string[];}){\r\n        const newState = Object.assign(this.state, { features: features });\r\n\r\n        this.setState(newState);\r\n    }\r\n\r\n    private setSelectedFeatures(features: {featureId: number, value: string}[]){\r\n        const newState = Object.assign(this.state.filters, {\r\n            selectedFeatures: features\r\n        })\r\n\r\n        this.setState(newState);\r\n    }\r\n\r\n    render(){\r\n\r\n        if(!this.state.isLoggedIn){\r\n            <Redirect to=\"/login\"></Redirect>\r\n        }\r\n\r\n        return(\r\n            <Container>\r\n                <RoledMainMenu role='user'/>\r\n                <Card bg=\"dark\" text=\"primary\">\r\n                    <Card.Header><FontAwesomeIcon icon={faArchway}></FontAwesomeIcon> Categories </Card.Header>\r\n                    <Card.Body>\r\n                        <Card.Title>\r\n                        <FontAwesomeIcon icon={faListAlt}></FontAwesomeIcon>\r\n                             {this.state.category?.name}\r\n                        </Card.Title>\r\n                        <Container>\r\n                            {this.printOptionalMessage()}\r\n                            {this.showSubcategories()}\r\n                            <Row>\r\n                                <Col xs=\"12\" md=\"4\" lg=\"3\">\r\n                                    {this.printFilters()}\r\n                                </Col>\r\n                                <Col xs=\"12\" md=\"8\" lg=\"9\">\r\n                                    {this.showArticles()}\r\n                                </Col>\r\n                            </Row>\r\n                        </Container>\r\n                    </Card.Body>\r\n                </Card>\r\n            </Container>\r\n        );\r\n    }\r\n\r\n    private printFilters(){\r\n        return(\r\n            <>\r\n            <Form.Group>\r\n                <Form.Label htmlFor=\"keywords\">Search keywords: </Form.Label>\r\n                <Form.Control type=\"text\" id=\"keywords\" value={this.state.filters.keywords} onChange={(e) =>\r\n                     {this.filtersKeywordChange(e as any)}}></Form.Control>\r\n            </Form.Group>\r\n            <Form.Group>\r\n                <Row>\r\n                    <Col xs=\"12\" sm=\"6\">\r\n                    <Form.Label htmlFor=\"priceMin\">Min. price: </Form.Label>\r\n                    <Form.Control type=\"number\" id=\"priceMin\" value={this.state.filters.priceMin} onChange={(e) => {this.filtersMinPriceChanged(e as any)}} \r\n                    min=\"0.01\" max=\"99999.99\" step=\"0.01\"></Form.Control>\r\n                    </Col>\r\n                    <Col xs=\"12\" sm=\"6\">\r\n                    <Form.Label htmlFor=\"priceMax\">Max. price: : </Form.Label>\r\n                    <Form.Control type=\"number\" id=\"priceMax\" value={this.state.filters.priceMax} onChange={(e) => {this.filtersMaxPriceChanged(e as any)}} \r\n                    min=\"0.01\" max=\"99999.99\" step=\"0.01\"></Form.Control>\r\n                    </Col>\r\n                </Row>\r\n            </Form.Group>\r\n            <Form.Group>\r\n                <Form.Control as=\"select\" id=\"sortOrder\" value={this.state.filters.order} onChange={ (e) => this.filterOrderChanged(e as any)}>\r\n                    <option value=\"name asc\">Sort by name - asc</option>\r\n                    <option value=\"name desc\">Sort by name - desc</option>\r\n                    <option value=\"price asc\">Sort by price - asc</option>\r\n                    <option value=\"price desc\">Sort by price - desc</option>\r\n                </Form.Control>\r\n            </Form.Group>\r\n            <h2>Features</h2>\r\n            {this.state.features.map(component => this.printFeatureFilterComponent(component))}\r\n            <Form.Group>\r\n                <Button variant=\"primary\" block onClick={(e) => this.applyFilters()}><FontAwesomeIcon icon={faSearch}></FontAwesomeIcon>Search</Button>\r\n            </Form.Group>\r\n            </>\r\n\r\n        );\r\n    }\r\n\r\n    private setNewFilter(newFilter: any){\r\n        this.setState(Object.assign(this.state, {\r\n            filter: newFilter\r\n        })\r\n        )\r\n    }\r\n\r\n    private applyFilters(){\r\n        this.getCatData();\r\n    }\r\n\r\n    private filtersMinPriceChanged(event: React.ChangeEvent<HTMLInputElement>){\r\n        this.setNewFilter(Object.assign(this.state.filters, { priceMin: Number(event.target.value) }));\r\n    }\r\n\r\n    private filtersMaxPriceChanged(event: React.ChangeEvent<HTMLInputElement>){\r\n        this.setNewFilter(Object.assign(this.state.filters, { priceMax: Number(event.target.value) }));\r\n    }\r\n\r\n    private filtersKeywordChange(event: React.ChangeEvent<HTMLInputElement>){\r\n        this.setNewFilter(Object.assign(this.state.filters, { keywords: event.target.value }));\r\n    }\r\n\r\n    private filterOrderChanged(event: React.ChangeEvent<HTMLSelectElement>){\r\n        this.setNewFilter(Object.assign(this.state.filters, { order: event.target.value }));\r\n    }\r\n\r\n    private featureFilterChanged(event: React.ChangeEvent<HTMLInputElement>){\r\n        \r\n        const featureId = event.target.dataset.featureId;\r\n        const value = event.target.value;\r\n\r\n        if(event.target.checked){\r\n            this.addFeatureFilterValue(Number(featureId), value);\r\n        }else{\r\n            this.removeFeatureFilterValue(Number(featureId), value);\r\n        }\r\n    }\r\n\r\n    private addFeatureFilterValue(featureId: number, value: string){\r\n        \r\n        const newSelectedFeature = [...this.state.filters.selectedFeatures];\r\n        newSelectedFeature.push({\r\n            featureId: featureId,\r\n            value: value\r\n        });\r\n\r\n        this.setSelectedFeatures(newSelectedFeature);\r\n    }\r\n\r\n    private removeFeatureFilterValue(featureId: number, value: string){\r\n        const newSelectedFeatures = this.state.filters.selectedFeatures.filter(record => {\r\n            return !(record.featureId === featureId && record.value === value);\r\n        });\r\n\r\n        this.setSelectedFeatures(newSelectedFeatures);\r\n    }\r\n\r\n    componentWillMount(){\r\n        this.getCatData();\r\n    }\r\n\r\n    componentWillReceiveProps(newProps: CategoryPageProperties){\r\n        if(newProps.match.params.id === this.props.match.params.id){\r\n            return;\r\n        }\r\n        this.getCatData();\r\n    }\r\n\r\n    private getCatData(){\r\n       \r\n        api('api/category/' + this.props.match.params.id, 'get', {}).then((res: ApiResponse) =>{\r\n\r\n            if(res.status === 'login' || res.status === 'error'){ return this.setLogginState(false); }\r\n            \r\n            const categoryData: CategoryDto = {\r\n                categoryId: res.data.categoryId,\r\n                name: res.data.name\r\n            }\r\n        \r\n            this.setCategoryData(categoryData);\r\n\r\n            const subcategories: CategoryType[] = [];\r\n\r\n            if(res.data.categories.length > 0){\r\n\r\n                for(let category of res.data.categories){\r\n                    subcategories.push({\r\n                        categoryId: category.categoryId,\r\n                        name: category.name\r\n                    })\r\n                }\r\n\r\n                this.setSubcategories(subcategories);\r\n            }    \r\n        });     \r\n\r\n        const orderParts = this.state.filters.order.split(' ');\r\n        const orderBy = orderParts[0];\r\n        const orderDirection = orderParts[1].toUpperCase();\r\n\r\n        const featureFilters: any[] = [];\r\n        \r\n        for(const item of this.state.filters.selectedFeatures){\r\n\r\n            let found = false;\r\n            let foundRef = null;\r\n            \r\n            for(const featureFilter of featureFilters){\r\n                if(featureFilter.featureId ===  item.featureId){\r\n                    found = true;\r\n                    foundRef = featureFilter;\r\n                    break;\r\n                }\r\n            }\r\n            if(!found){\r\n                featureFilters.push({featureId: item.featureId, value: [item.value]});\r\n            }else{\r\n                foundRef.value.push(item.value);\r\n            }\r\n        }\r\n\r\n        api('/api/article/search', 'post', {\r\n            categoryId: this.props.match.params.id,\r\n            keywords: this.state.filters.keywords,\r\n            priceMin: this.state.filters.priceMin,\r\n            priceMax: this.state.filters.priceMax,\r\n            features: featureFilters,\r\n            orederBy: orderBy,\r\n            orderDirection: orderDirection\r\n        }).then((res: ApiResponse) =>{\r\n\r\n            if(res.status === 'login' || res.status === 'error'){ return this.setLogginState(false); }\r\n\r\n            if(res.data.statusCode === 0){\r\n                return this.setMessage('No articles found');\r\n            }\r\n\r\n            const articles: ArticleType[] = res.data.map((article: ArticleDto) => {\r\n\r\n                const object: ArticleType = {\r\n                    articleId: article.articleId,\r\n                    name: article.name,\r\n                    excerpt: article.excerpt,\r\n                    description: article.description,\r\n                    imageUrl: '',\r\n                    price: 0\r\n                }\r\n\r\n                if(article.photos !== undefined && article.photos?.length > 0){\r\n                    object.imageUrl = article.photos[article.photos.length -1].imagePath;\r\n                }\r\n\r\n                if(article.articlePrices !== undefined && article.articlePrices?.length > 0){\r\n                    object.price = article.articlePrices[article.articlePrices.length -1].price;\r\n                }\r\n\r\n                return object;\r\n            });\r\n\r\n            this.setArticles(articles);\r\n        });\r\n\r\n        this.getFeatures();\r\n    }\r\n\r\n    private getFeatures(){\r\n        api('api/feature/values/' + this.props.match.params.id, 'get', {})\r\n        .then((res: ApiResponse) =>{\r\n\r\n            if(res.status === 'login'){\r\n                return this.setLogginState(false);\r\n            }\r\n\r\n            if(res.status === 'error'){\r\n                return this.setMessage('Try to refresh page, we have an error there');\r\n            }\r\n\r\n            this.setFeatures(res.data.features);\r\n        })\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.getCatData();\r\n    }\r\n\r\n    private showSubcategories(){\r\n        if(this.state.subcategories?.length === 0){\r\n            return;\r\n        }\r\n\r\n        return(\r\n            <Row>\r\n                {this.state.subcategories?.map(this.singleCategorie)}\r\n            </Row>\r\n        );\r\n    }\r\n\r\n    private showArticles(){\r\n        if(this.state.articles?.length === 0){\r\n            return(\r\n                <div>Nemamo artikala za ponuditi za ovu kategoriju!</div>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <Row>\r\n                {this.state.articles?.map(this.singleArticle)}\r\n            </Row>\r\n        );\r\n    }\r\n\r\n    private singleCategorie(subCategory: CategoryType){\r\n\r\n        return(\r\n            <Col lg=\"3\" md=\"4\" sm=\"6\" xs=\"12\">\r\n              <Card>\r\n                <Card.Body>\r\n                  <Card.Title>\r\n                    {subCategory.name}\r\n                  </Card.Title>\r\n                  <Link to={`/category/${subCategory.categoryId}`} className=\"btn btn-primary btn-block btn-sm\"> Open category </Link>\r\n                </Card.Body>\r\n              </Card>\r\n            </Col>);\r\n    }\r\n\r\n    private singleArticle(article: ArticleType){\r\n        return(\r\n            <SingleArticlePreview article={article}></SingleArticlePreview>\r\n        );\r\n    }\r\n\r\n    private printFeatureFilterComponent(component: { featureId: number; name: string; values: string[]; }){\r\n\r\n        return(\r\n            <Form.Group>\r\n                <Form.Label><strong>{component.name}</strong></Form.Label>\r\n                {\r\n                    component.values.map(value => {\r\n                       return(<Form.Check value={value} label={value} type=\"checkbox\" data-feature-id={component.featureId}\r\n                       onChange={(e) => this.featureFilterChanged(e as any)}></Form.Check>); \r\n                    })\r\n                }\r\n            </Form.Group>\r\n        );\r\n    }\r\n\r\n    componentDidUpdate(oldProperties: CategoryPageProperties) {\r\n        if (oldProperties.match.params.id === this.props.match.params.id) {\r\n            return;\r\n        }\r\n\r\n        this.getCatData();\r\n    }\r\n}","C:\\Users\\DT User6\\Desktop\\MT JS\\nest projekat\\front-end\\src\\UserLoginPage\\UserLoginPage.tsx",[],"C:\\Users\\DT User6\\Desktop\\MT JS\\nest projekat\\front-end\\src\\api\\api.tsx",["94","95"],"import axios, { AxiosRequestConfig, AxiosResponse } from 'axios';\r\nimport { ApiConfig } from '../config/ApiConfig';\r\n\r\nexport default function api(path: string, method: 'get' | 'post' | 'put' | 'patch' | 'delete', body: any | undefined, role: 'user' | 'administrator' = 'user'){\r\n\r\n    return new Promise<ApiResponse>((resolve) => {\r\n        \r\n        const requestData: AxiosRequestConfig = {\r\n            method: method,\r\n            url: path,\r\n            baseURL: ApiConfig.API_URL,\r\n            data: JSON.stringify(body),\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': getToken(role)            }\r\n        };\r\n\r\n        axios(requestData)\r\n        .then(res => responseHandler(res, resolve))\r\n        .catch(async err => {\r\n   \r\n            const response: ApiResponse = {\r\n                status: 'error',\r\n                data: err\r\n            };\r\n\r\n            return resolve(response);\r\n        });\r\n    });\r\n    \r\n}\r\n\r\nfunction getToken(role: 'user' | 'administrator'): string{\r\n    const token = localStorage.getItem('api_token' + role);\r\n    return 'Berer ' + token;\r\n}\r\n\r\nexport function saveToken(token: string, role: 'user' | 'administrator'): void{\r\n    localStorage.setItem('api_token' + role, token)\r\n}\r\n\r\nfunction getRefreshtoken(role: 'user' | 'administrator'): string{\r\n    const token = localStorage.getItem('api_refresh_token' + role);\r\n    return token + '';\r\n}\r\n\r\nexport function saveRefreshToken(token: string, role: 'user' | 'administrator'): void{\r\n    localStorage.setItem('api_refresh_token' + role, token)\r\n}\r\n\r\nasync function responseHandler(res: AxiosResponse<any>, resolve: (value: ApiResponse) => void){\r\n\r\n    if(res.status < 200 || res.status >= 300){\r\n\r\n        const response: ApiResponse = {\r\n            status: 'error',\r\n            data: res.data\r\n        };\r\n\r\n        return resolve(response);\r\n    }\r\n    \r\n    if(res.data.statusCode < 0){\r\n        const response: ApiResponse = {\r\n            status: 'ok',\r\n            data: res.data\r\n        };\r\n\r\n        return resolve(response);\r\n    }\r\n\r\n    const response: ApiResponse = {\r\n        status: 'ok',\r\n        data: res.data\r\n    };\r\n\r\n    return resolve(response)\r\n}\r\n\r\nexport interface ApiResponse{\r\n    status: 'ok' | 'error' | 'login';\r\n    data: any;\r\n}\r\n\r\nasync function refreshToken(role: 'user' | 'administrator'): Promise<string | null>{\r\n\r\n    const path = 'auth/' + role + '/refresh';\r\n    const data = {\r\n        token: getRefreshtoken(role)\r\n    };\r\n\r\n    const refreshTokenRequestData: AxiosRequestConfig = {\r\n\r\n        method: 'post',\r\n        url: path,\r\n        baseURL: ApiConfig.API_URL,\r\n        data: JSON.stringify(data),\r\n        headers: {\r\n            'Content-Type': 'aplication/json'\r\n        }\r\n    }\r\n\r\n    const refreshTokenResponse: {data: {token: string | undefined } } = await axios(refreshTokenRequestData);\r\n\r\n    if(!refreshTokenResponse.data.token){\r\n        return null;\r\n    }\r\n\r\n    return refreshTokenResponse.data.token;\r\n\r\n}\r\n\r\nexport function saveIdentity(identity: string, role: \"user\" | \"administrator\"){\r\n    localStorage.setItem('api_identity' + role, identity);\r\n}\r\n\r\nexport function getIdentity(role: \"user\" | \"administrator\"): string{\r\n    const item = localStorage.getItem('api_identity' + role);\r\n\r\n    return item + '';\r\n}\r\n\r\nexport function saveId(iDAsString: string, role: \"user\" | \"administrator\"){\r\n    localStorage.setItem('api_id' + role, iDAsString);\r\n}\r\n\r\nexport function getId(role: \"user\" | \"administrator\"): string{\r\n    const item = localStorage.getItem('api_id' + role);\r\n\r\n    return item + '';\r\n}\r\n\r\nasync function repeatRequest(requestData: AxiosRequestConfig, resolve: (value: ApiResponse) => void){\r\n\r\n    axios(requestData).then(res =>{\r\n        if(res.status === 401){\r\n            const response: ApiResponse = {\r\n                status: 'login',\r\n                data: null\r\n            }\r\n            return resolve(response);\r\n        }\r\n\r\n        const response: ApiResponse = {\r\n            status: 'ok',\r\n            data: res\r\n        }\r\n\r\n        return resolve(response);\r\n    }).catch(err => {\r\n        const response: ApiResponse = {\r\n            status: 'error',\r\n            data: err\r\n        }\r\n        return resolve(response);\r\n    })\r\n}","C:\\Users\\DT User6\\Desktop\\MT JS\\nest projekat\\front-end\\src\\config\\ApiConfig.tsx",[],"C:\\Users\\DT User6\\Desktop\\MT JS\\nest projekat\\front-end\\src\\UserRegistrationPage\\UserRegistrationPage.tsx",[],"C:\\Users\\DT User6\\Desktop\\MT JS\\nest projekat\\front-end\\src\\SingleArticlePreview\\SingleArticlePreview.tsx",[],"C:\\Users\\DT User6\\Desktop\\MT JS\\nest projekat\\front-end\\src\\Cart\\CartPage.tsx",["96","97"],"import { faCartArrowDown, faMinusSquare, faTrashAlt } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport React from \"react\";\r\nimport { Alert, Button, Form, Modal, Nav, Table } from \"react-bootstrap\";\r\nimport api, { ApiResponse } from \"../api/api\";\r\nimport CartType from \"../Types/CartType\";\r\n\r\ninterface CartPageState {\r\n    quantity: number;\r\n    cart?: CartType;\r\n    visible: boolean;\r\n    message: string;\r\n}\r\n\r\nexport default class CartPage extends React.Component{\r\n    state: CartPageState;\r\n\r\n    constructor(props: Readonly<{}>){\r\n\r\n        super(props);\r\n\r\n        this.state = {\r\n            quantity: 1,\r\n            visible: false,\r\n            message: ''\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.updateCart();\r\n        window.addEventListener('cart.update', () => this.updateCart());\r\n    }\r\n\r\n    componentWillMount(){\r\n        window.removeEventListener('cart.update', () => this.updateCart());\r\n    }\r\n\r\n    private setStateCart(newCart?: CartType){\r\n        this.setState(Object.assign(this.state, {cart: newCart}));\r\n    }\r\n\r\n    private setStateQuantity(newQuantity: number){\r\n        this.setState(Object.assign(this.state, {quantity: newQuantity}));\r\n    }\r\n\r\n    private setStateVisible(state: boolean){\r\n        this.setState(Object.assign(this.state, {visible: state}));\r\n    }\r\n\r\n    private setStateMessage(message: string){\r\n        this.setState(Object.assign(this.state, {\r\n            message: message\r\n        }));\r\n    }\r\n\r\n    private showCart(){\r\n        this.setStateVisible(true);\r\n    }\r\n\r\n    private hideCart(){\r\n        this.setStateVisible(false);\r\n        this.setStateMessage('');\r\n    }\r\n\r\n    private updateCart(){\r\n        api('/api/user/cart', 'get', {}).then((res: ApiResponse) => {\r\n            if(res.status === 'error' || res.status === 'login'){\r\n                this.setStateQuantity(0);\r\n                this.setStateCart(undefined);\r\n                return;\r\n            }\r\n\r\n            this.setStateCart(res.data);\r\n            this.setStateQuantity(res.data.cartArticles.length);\r\n        });\r\n    }\r\n\r\n    private updateQuantity(event: React.ChangeEvent<HTMLInputElement>){\r\n        \r\n        const articleId = event.target.dataset.articleId;\r\n        const value = event.target.value;\r\n\r\n        const data = {\r\n            articleId: Number(articleId),\r\n            quantity: Number(value)\r\n        }\r\n\r\n        this.manageCart(data);\r\n    }\r\n\r\n    private manageCart(data: {articleId: number; quantity: number;}){\r\n        \r\n        api('/api/user/cart/', 'patch', data).then((res: ApiResponse) =>{\r\n           \r\n            if(res.status === 'error' || res.status === 'login'){\r\n                this.setStateQuantity(0);\r\n                this.setStateCart(undefined);\r\n                return;\r\n            }\r\n\r\n            this.setStateCart(res.data);\r\n            this.setStateQuantity(res.data.cartArticles.length);\r\n        });\r\n    }\r\n\r\n    private deleteFromCart(articleId: number){\r\n\r\n        const data = {\r\n            articleId: articleId,\r\n            quantity: 0\r\n        }\r\n\r\n        this.manageCart(data);\r\n    }\r\n\r\n    private makeAnOrder(){\r\n        api('/api/user/cart/makeAnOrder', 'post', {}).then((res:ApiResponse) => {\r\n            if(res.status === 'error' || res.status === 'login'){\r\n                this.setStateQuantity(0);\r\n                this.setStateCart(undefined);\r\n                return;\r\n            }\r\n\r\n            this.setStateMessage('Your order has been made.\\nCongrats');\r\n\r\n            this.setStateCart(undefined);\r\n            this.setStateQuantity(0);\r\n        });\r\n    }\r\n    \r\n    private calculateSumm(): number{\r\n     \r\n        let summ: number = 0;\r\n\r\n        if(typeof this.state.cart == undefined){\r\n            return summ;\r\n        }else{\r\n\r\n            this.state.cart?.cartArticles.map(item => {\r\n                summ += item.article.articlePrices[item.article.articlePrices.length - 1].price * item.quantity;\r\n            });\r\n        }\r\n        return summ;\r\n    }\r\n\r\n    private showInTable(){\r\n        return(\r\n            <Table hover size=\"sm\">\r\n                <thead>\r\n                    <tr>\r\n                        <th>Category</th>\r\n                        <th>Article</th>\r\n                        <th>Quantity</th>\r\n                        <th>Price</th>\r\n                        <th>Total</th>\r\n                        <th></th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {this.state.cart?.cartArticles.map(item => {\r\n                        return(\r\n                            <tr>\r\n                                <td>{item.article.category.name}</td>\r\n                                <td>{item.article.name}</td>\r\n                                <td><Form.Control type=\"number\" data-article-id={item.article.articleId} value={Number(item.quantity)}\r\n                                 min=\"1\" step=\"1\" onChange={(e) => this.updateQuantity(e as any)} className=\"text-center\"></Form.Control></td>\r\n                                <td>{Number(item.article.articlePrices[item.article.articlePrices.length - 1].price).toFixed(2)} Eur</td>\r\n                                <td>{Number(item.article.articlePrices[item.article.articlePrices.length - 1].price * item.quantity).toFixed(2)} Eur</td>\r\n                                <td><FontAwesomeIcon icon={faTrashAlt} onClick={() => this.deleteFromCart(item.articleId)} style={{cursor: \"pointer\"}}></FontAwesomeIcon></td>\r\n                            </tr>\r\n                        );\r\n                    }, this)}\r\n                </tbody>\r\n                <tfoot>\r\n                    <tr>\r\n                        <td>Total</td>\r\n                        <td className=\"text-right\">{Number(this.calculateSumm()).toFixed(2)} Eur</td>\r\n                        <td></td>\r\n                        <td></td>\r\n                        <td></td>\r\n                        <td></td>\r\n                    </tr>\r\n                </tfoot>\r\n                \r\n            </Table>\r\n        );\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <>\r\n            <Nav.Item>\r\n                <Nav.Link active={false} onClick={() => this.showCart()}>\r\n                    <FontAwesomeIcon icon={faCartArrowDown}></FontAwesomeIcon> ({this.state.quantity})\r\n                </Nav.Link>\r\n            </Nav.Item>\r\n            <Modal size=\"lg\" centered show={this.state.visible} onHide={() => this.hideCart()}>\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>\r\n                        Your shoping cart\r\n                    </Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                        {this.showInTable()}\r\n                        <Alert variant='success' className={this.state.message ? '': 'd-none'}>{this.state.message}</Alert>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button variant=\"primary\" onClick={() => this.makeAnOrder()} disabled={this.state.cart?.cartArticles.length === 0}>Make an order</Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n            \r\n            \r\n            </>\r\n        );\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n}",["98","99"],"C:\\Users\\DT User6\\Desktop\\MT JS\\nest projekat\\front-end\\src\\OrderPage\\OrderPage.tsx",["100"],"import { faBox, faBoxOpen, faTrashAlt } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport React from \"react\";\r\nimport { Button, Card, Container, Modal, Table } from 'react-bootstrap';\r\nimport { Redirect } from \"react-router-dom\";\r\nimport api, { ApiResponse } from \"../api/api\";\r\nimport RoledMainMenu from \"../RoledMainMenu/RoledMainMenu\";\r\nimport CartType from \"../Types/CartType\";\r\nimport OrderType from \"../Types/OrderType\";\r\n\r\ninterface OrderDto {\r\n    orderId: number;\r\n    createdAt: string;\r\n    status: \"rejected\" | \"accepted\" | \"shipped\" | \"pending\";\r\n    cart: {\r\n        cartId: number;\r\n        createdAt: string;\r\n        cartArticles: {\r\n            quantity: number;\r\n            article: {\r\n                articleId: number;\r\n                name: string;\r\n                excerpt: string;\r\n                status: \"available\" | \"visible\" | \"hidden\";\r\n                isPromoted: number;\r\n                category: {\r\n                    categoryId: number;\r\n                    name: string;\r\n                },\r\n                articlePrices: {\r\n                    createdAt: string;\r\n                    price: number;\r\n                }[];\r\n                photos: {\r\n                    imagePath: string;\r\n                }[];\r\n            };\r\n        }[];\r\n    };\r\n}\r\n\r\ninterface OrderPageState {\r\n    isLoggedIn: boolean;\r\n    orders: OrderType[];\r\n    cartVisible: boolean;\r\n    cart?: CartType;\r\n}\r\n\r\nexport class OrderPage extends React.Component{\r\n\r\n    state: OrderPageState;\r\n\r\n    constructor(props: Readonly<{}>){\r\n\r\n        super(props);\r\n\r\n        this.state = {\r\n            isLoggedIn: true,\r\n            orders: [],\r\n            cartVisible: false,\r\n        }\r\n    }\r\n\r\n    private setLogginState(isLogged: boolean){\r\n        this.setState(Object.assign(this.state, {\r\n            isLoggedIn: isLogged\r\n        }));\r\n    }\r\n\r\n    private setOrdersState(orders: OrderType[]){\r\n        this.setState(Object.assign(this.state, {\r\n            orders: orders\r\n        }))\r\n    }\r\n\r\n    private getOrders() {\r\n        api('/api/user/cart/orders/', 'get', {})\r\n        .then((res: ApiResponse) => {\r\n            if (res.status === 'error' || res.status === 'login') {\r\n                return this.setLogginState(false);\r\n            }\r\n\r\n            const data: OrderDto[] = res.data;\r\n\r\n            const orders: OrderType[] = data.map(order => ({\r\n                orderId: order.orderId,\r\n                status: order.status,\r\n                createdAt: order.createdAt,\r\n                cart: {\r\n                    cartId: order.cart.cartId,\r\n                    user: null,\r\n                    userId: 0,\r\n                    createdAt: order.cart.createdAt,\r\n                    cartArticles: order.cart.cartArticles.map(ca => ({\r\n                        cartArticleId: 0,\r\n                        articleId: ca.article.articleId,\r\n                        quantity: ca.quantity,\r\n                        article: {\r\n                            articleId: ca.article.articleId,\r\n                            name: ca.article.name,\r\n                            category: {\r\n                                categoryId: ca.article.category.categoryId,\r\n                                name: ca.article.category.name,\r\n                            },\r\n                            articlePrices: ca.article.articlePrices.map(ap => ({\r\n                                articlePriceId: 0,\r\n                                price: ap.price,\r\n                            }))\r\n                        }\r\n                    }))\r\n                }\r\n            }));\r\n\r\n            this.setOrdersState(orders);\r\n        });\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getOrders();\r\n    }\r\n\r\n    //Implementirati da uzimam cjenu sa metodom getLatestPriceBeforeDate... i neke sitnice oko cijene\r\n    render(){\r\n\r\n        if (this.state.isLoggedIn === false) {\r\n            return (\r\n                <Redirect to=\"/user/login\" />\r\n            );\r\n        }\r\n\r\n        return(\r\n            <Container>\r\n                <RoledMainMenu role='user'/>\r\n                <Card bg=\"white\" text=\"primary\">\r\n                    <Card.Title><FontAwesomeIcon icon={faBox}></FontAwesomeIcon></Card.Title>\r\n                    <Card.Body>\r\n                <Table hover size=\"sm\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th>CreatedAt</th>\r\n                            <th>Status</th>\r\n                            <th></th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {this.state.orders.map(this.printOrderRow, this)}\r\n                    \r\n                    </tbody>\r\n                </Table>\r\n                </Card.Body>\r\n                </Card>\r\n                <Modal size=\"lg\" centered show={this.state.cartVisible} onHide={() => this.hideCart()}>\r\n        <Modal.Header closeButton>\r\n            <Modal.Title>\r\n                Your order\r\n            </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n        <Table hover size=\"sm\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Category</th>\r\n                            <th>Article</th>\r\n                            <th>Quantity</th>\r\n                            <th>Price</th>\r\n                            <th>Total</th>\r\n                            <th></th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {this.state.cart?.cartArticles.map(item => {\r\n                            return(\r\n                                <tr>\r\n                                    <td>{item.article.category.name}</td>\r\n                                    <td>{item.article.name}</td>\r\n                                    <td>{item.quantity}</td>\r\n                                    <td>{Number(this.getLatestPriceBeforeDate(item.article, this.state.cart?.createdAt).price).toFixed(2)} Eur</td>\r\n                                    <td>{Number(this.getLatestPriceBeforeDate(item.article, this.state.cart?.createdAt).price * item.quantity).toFixed(2)} Eur</td>\r\n                                </tr>\r\n                            );\r\n                        }, this)}\r\n                    </tbody>\r\n                    <tfoot>\r\n                        <tr>\r\n                            <td>Total</td>\r\n                            <td className=\"text-right\">{Number(this.calculateSumm()).toFixed(2)} Eur</td>\r\n                            <td></td>\r\n                            <td></td>\r\n                            <td></td>\r\n                            <td></td>\r\n                        </tr>\r\n                    </tfoot>\r\n                    \r\n                </Table>\r\n        </Modal.Body>\r\n    </Modal>\r\n            </Container>\r\n\r\n\r\n        );\r\n    }\r\n\r\n    private printOrderRow(order: OrderType){\r\n        return(\r\n            <tr key={ order.orderId }>\r\n                 <td>{ order.createdAt }</td>\r\n                <td>{ order.status }</td>\r\n                <td className=\"text-right\">\r\n                    <Button size=\"sm\" variant=\"primary\"\r\n                       onClick={ () => this.setAndShowCart(order.cart) }>\r\n                     <FontAwesomeIcon icon={ faBoxOpen } />\r\n                    </Button>\r\n                  </td>\r\n            </tr>\r\n        );\r\n    }\r\n\r\n    private getLatestPriceBeforeDate(article: any, latestDate: any) {\r\n        const cartTimestamp = new Date(latestDate).getTime();\r\n\r\n        let price = article.articlePrices[0];\r\n\r\n        for (let ap of article.articlePrices) {\r\n            const articlePriceTimestamp = new Date(ap.createdAt).getTime();\r\n\r\n            if (articlePriceTimestamp < cartTimestamp) {\r\n                price = ap;\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        return price;\r\n    }\r\n\r\n    private calculateSumm(): number {\r\n        let sum: number = 0;\r\n\r\n        if (this.state.cart === undefined) {\r\n            return sum;\r\n        } else {\r\n            for (const item of this.state.cart?.cartArticles) {\r\n                let price = this.getLatestPriceBeforeDate(item.article, this.state.cart.createdAt);\r\n                sum += price.price * Number(item.quantity);\r\n            }\r\n        }\r\n\r\n        return sum;\r\n    }\r\n\r\n    private setStateCart(cart: CartType){\r\n        this.setState(Object.assign(this.state, {\r\n            cart: cart\r\n        }));\r\n    }\r\n\r\n    private setAndShowCart(cart: CartType){\r\n        this.setStateCart(cart);\r\n        this.showCart();\r\n    }\r\n\r\n    private setCartVisibleState(isItTrue: boolean){\r\n        this.setState(Object.assign(this.state, {\r\n            cartVisible: isItTrue\r\n        }));\r\n    }\r\n\r\n    private hideCart() {\r\n        this.setCartVisibleState(false);\r\n    }\r\n\r\n    private showCart() {\r\n        this.setCartVisibleState(true);\r\n    }\r\n\r\n\r\n}","C:\\Users\\DT User6\\Desktop\\MT JS\\nest projekat\\front-end\\src\\AdministratorLoginPage\\AdministratorLoginPage.tsx",["101"],"import React from 'react';\r\nimport { Container, Card, Col, Form, Button, Alert} from 'react-bootstrap';\r\nimport {faSignInAlt} from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon} from '@fortawesome/react-fontawesome';\r\nimport api, {ApiResponse, saveToken, saveRefreshToken, saveIdentity, saveId} from '../api/api'\r\nimport { Redirect } from \"react-router-dom\"\r\nimport RoledMainMenu from '../RoledMainMenu/RoledMainMenu';\r\n\r\ninterface AdministratorLoginPageState{\r\n    username: string;\r\n    password: string;\r\n    errorMessage: string;\r\n    isLoggedIn: boolean;\r\n}\r\n\r\nexport class AdministratorLoginPage extends React.Component{\r\n\r\n    state: AdministratorLoginPageState;\r\n\r\n    constructor(props: Readonly<{}>){\r\n        super(props);\r\n\r\n        this.state = {\r\n            username: '',\r\n            password: '',\r\n            errorMessage: '',\r\n            isLoggedIn: false\r\n        }\r\n    }\r\n\r\n    private setErrorMessage(message: string){\r\n        const newState = Object.assign(this.state, {\r\n            errorMessage: message\r\n        });\r\n\r\n        this.setState(newState);\r\n    }\r\n\r\n    private setLogginState(isLogged: boolean){\r\n        const newState = Object.assign(this.state, {\r\n            isLoggedIn: isLogged\r\n        });\r\n\r\n        this.setState(newState);\r\n    }\r\n\r\n    private formInputChanged(event: React.ChangeEvent<HTMLInputElement>){\r\n        const newState = Object.assign(this.state,\r\n            { [event.target.id]: event.target.value});\r\n        \r\n        this.setState(newState);\r\n    }\r\n\r\n    private doLogin(){\r\n\r\n        api('auth/administrator/login',\r\n        'post',{\r\n            username: this.state.username,\r\n            password: this.state.password\r\n        }).then((res: ApiResponse) =>{\r\n\r\n            if(res.status === 'error'){\r\n                this.setErrorMessage(\"You made an input misstake, try again!\");\r\n\r\n                return;\r\n            }\r\n            if(res.status === 'ok'){\r\n\r\n                if(res.data.statusCode !== undefined){\r\n\r\n                    let message: string = '';\r\n\r\n                    switch (res.data.statusCode) {\r\n                        case -3001:\r\n                            message = \"Unknown username\";\r\n                            break;\r\n                        case -3002:\r\n                            message = \"Bad password\";\r\n                            break;\r\n                    }\r\n\r\n                    this.setErrorMessage(message);\r\n                    return;\r\n                }\r\n\r\n                saveToken(res.data.token, 'administrator');\r\n                saveRefreshToken(res.data.refreshToken, 'administrator');\r\n                saveId(res.data.id, 'administrator');\r\n                \r\n                this.setLogginState(true);\r\n            }\r\n        });\r\n    }\r\n\r\n    render() {\r\n        if(this.state.isLoggedIn){\r\n            return (\r\n                <Redirect to=\"/administrator/dashboard\" />\r\n            );\r\n        }\r\n    return (\r\n        <Container>\r\n            <RoledMainMenu role='visitor'/>\r\n            <Card bg=\"dark\" text=\"light\">\r\n                <Card.Header><FontAwesomeIcon icon={faSignInAlt}></FontAwesomeIcon>Administrator Logg in</Card.Header>\r\n                <Card.Body>\r\n                   <Col md={ {span: 6, offset: 3} }>\r\n                       <Form>\r\n                           <Form.Group>\r\n                               <Form.Label htmlFor=\"username\">Username</Form.Label>\r\n                               <Form.Control type='text' id='username' value={this.state.username} onChange={(event: any) => this.formInputChanged(event)}></Form.Control>\r\n                           </Form.Group>\r\n                           <Form.Group>\r\n                               <Form.Label htmlFor=\"password\">Password</Form.Label>\r\n                               <Form.Control type='password' id='password' value={this.state.password} onChange={(event: any) => this.formInputChanged(event)}></Form.Control>\r\n                           </Form.Group>\r\n                           <Form.Group>\r\n                               <Button variant=\"primary\" onClick={() => this.doLogin()}>Log in</Button>\r\n                           </Form.Group>\r\n                       </Form>\r\n                       <Alert variant=\"danger\" className={this.state.errorMessage ? '' : 'd-none'}>{this.state.errorMessage}</Alert>\r\n                   </Col>\r\n                </Card.Body>\r\n            </Card>\r\n        </Container>\r\n    );\r\n    }\r\n}\r\n","C:\\Users\\DT User6\\Desktop\\MT JS\\nest projekat\\front-end\\src\\AdministratorDashboardPage\\AdministratorDashboardPage.tsx",["102","103","104","105"],"import { faBook, faListAlt } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport React from \"react\";\r\nimport { Card, CardImg, Container, Row } from \"react-bootstrap\";\r\nimport { Link, Redirect } from \"react-router-dom\";\r\nimport { idText } from \"typescript\";\r\nimport api, { ApiResponse, getId } from \"../api/api\";\r\nimport { ApiConfig } from \"../config/ApiConfig\";\r\nimport RoledMainMenu from \"../RoledMainMenu/RoledMainMenu\";\r\n\r\ninterface AdministratorDashboardPageState {\r\n    logginState: boolean;\r\n    id: number;\r\n    username: string;\r\n    alert: string;\r\n}\r\n\r\nexport class AdministratorDashboardPage extends React.Component {\r\n\r\n    state: AdministratorDashboardPageState;\r\n\r\n    constructor(props: Readonly<{}>){\r\n        super(props);\r\n\r\n        this.state = {\r\n            logginState: false,\r\n            id: 0,\r\n            username: '',\r\n            alert: ''\r\n        }\r\n    }\r\n\r\n    private setAlertState(message: string){\r\n        this.setState(Object.assign(this.state, {\r\n            alert: message\r\n        }))\r\n    }\r\n\r\n    private setADminDataState(id: number, username: string){\r\n        this.setState(Object.assign(this.state, {\r\n            id: id,\r\n            username: username\r\n        }))\r\n    }\r\n\r\n    private setLogginState(logginState: boolean){\r\n        this.setState(Object.assign(this.state, { logginState: logginState }));\r\n    }\r\n\r\n    \r\n    private getMyData(){\r\n\r\n        const administratorid = Number(getId('administrator'));\r\n\r\n        api('/api/administrator/' + administratorid, 'get', {}, 'administrator').then((res: ApiResponse) => {\r\n\r\n            if(res.status === 'error' || res.status === 'login'){\r\n                this.setAlertState('Your loggin doesnt workout, please try again!');\r\n                return;\r\n            }\r\n\r\n            this.setADminDataState(Number(res.data.administratorId), res.data.username);\r\n        });\r\n    }\r\n\r\n    componentWillMount(){\r\n        this.getMyData();\r\n    }\r\n\r\n    componentWillUpdate(){\r\n        this.getMyData();\r\n    }\r\n\r\n\r\n\r\n    render(){\r\n\r\n        if(this.state.logginState === false){\r\n          <Redirect to=\"/administrator/login\"></Redirect>\r\n        }\r\n      \r\n        return(\r\n          <Container>\r\n            <RoledMainMenu role='admin'/>\r\n            <Card bg=\"dark\" text=\"primary\">\r\n            <Card.Header className=\"text-center\" style={{color: 'white'}}>\r\n              <FontAwesomeIcon style={{height: '40px', width: \"40px\"}} icon={faBook}></FontAwesomeIcon> \r\n              <strong style={{fontSize: \"30px\"}}>Administrator Dashboard</strong>\r\n            </Card.Header>\r\n            <Card.Body>\r\n                <Card>\r\n                    <Card.Title>\r\n                        Hello {this.state.username}\r\n                        <CardImg width=\"100%\" height=\"400px\" src=\"https://upload.wikimedia.org/wikipedia/commons/d/d4/Flag_of_the_Republika_Srpska_%28unoff%29.jpg\" />\r\n                    </Card.Title>\r\n                </Card>\r\n                <Card.Text>Your id is {this.state.id}</Card.Text>\r\n                <ul>\r\n                    <li style={{color: '#dc0001'}}><Link style={{color: '#dc0001'}} to='/administrator/dashboard/category'>Category</Link></li>\r\n                    <li style={{color: '#2f54ff'}}><Link style={{color: '#2f54ff'}} to='/administrator/dashboard/Article'>Article</Link></li>\r\n                    <li style={{color: 'white'}}><Link style={{color: 'white'}} to='/administrator/dashboard/feature'>Feature</Link></li>\r\n                    <li style={{color: 'white'}}><Link style={{color: 'white'}} to='/administrator/dashboard/get_reverse_shell'> Get hacked</Link></li>\r\n                </ul>\r\n            </Card.Body>\r\n            </Card>\r\n          </Container>\r\n        );\r\n      }\r\n\r\n\r\n\r\n}\r\n//, border: '1px solid black'","C:\\Users\\DT User6\\Desktop\\MT JS\\nest projekat\\front-end\\src\\HomePage\\HomePage.tsx",[],"C:\\Users\\DT User6\\Desktop\\MT JS\\nest projekat\\front-end\\src\\RoledMainMenu\\RoledMainMenu.tsx",["106"],"import React from \"react\";\r\nimport { MainMenu, MainMenuItem } from \"../MainMenu/MainMenu\";\r\n\r\ninterface RoledMainMenuProperties {\r\n    role: 'user' | 'admin' | 'visitor';\r\n}\r\n\r\nexport default class RoledMainMenu extends React.Component<RoledMainMenuProperties> {\r\n\r\n    constructor(props: Readonly<RoledMainMenuProperties>){\r\n        super(props);\r\n\r\n    }\r\n\r\n    render(){\r\n        let items: MainMenuItem[] = [];\r\n\r\n        switch(this.props.role){\r\n            case 'user': items = this.getUserMenuItems(); break;\r\n            case 'admin': items = this.getAdminMenuItems(); break;\r\n            case 'visitor': items = this.getVisitorMenuitems(); break;\r\n        }\r\n\r\n        let showCart: boolean = false;\r\n\r\n        if(this.props.role === 'user'){\r\n            showCart = true;\r\n        }\r\n\r\n        return <MainMenu items={items} showCart={showCart}/>\r\n    }\r\n\r\n    private getAdminMenuItems(): MainMenuItem[]{\r\n        return [new MainMenuItem('/administrator/dashboard', 'Dashboard'),\r\n        new MainMenuItem('/administrator/dashboard/logout', 'Logout'),\r\n        new MainMenuItem('/administrator/dashboard/category', 'Category'),\r\n        new MainMenuItem('/administrator/dashboard/article', 'Article'),\r\n        new MainMenuItem('/administrator/dashboard/feature', 'Feature')];\r\n    }\r\n\r\n    private getUserMenuItems(): MainMenuItem[]{\r\n\r\n        return [new MainMenuItem(\"\", \"Home\"),\r\n        new MainMenuItem(\"contact\", \"Contact\"),\r\n        new MainMenuItem(\"aboutUs\", \"About us\"),\r\n        new MainMenuItem('user/orders', \"My orders\"),\r\n        new MainMenuItem('user/logout', \"Logout\")];\r\n    }\r\n\r\n    private getVisitorMenuitems(): MainMenuItem[]{\r\n        return [new MainMenuItem('user/login', \"Log in\"),\r\n        new MainMenuItem('registration', 'User registration'),\r\n        new MainMenuItem('administrator/login', 'Admin Log in')];\r\n    }\r\n\r\n\r\n}","C:\\Users\\DT User6\\Desktop\\MT JS\\nest projekat\\front-end\\src\\AdministratorDashboardCategory\\AdministratorDashboardCategory.tsx",["107","108","109","110","111","112","113","114","115","116","117"],"import { faArchive, faArrowsAlt, faDatabase, faFileArchive, faListAlt, faPlus, faPlusCircle, faPlusSquare, faSave, faStore, faStoreAlt, faStoreAltSlash, faToolbox, faTools, faTrash } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport React from \"react\";\r\nimport { Alert, Button, Card, Container, Form, Modal, Row, Table} from \"react-bootstrap\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport api, { ApiResponse } from \"../api/api\";\r\nimport RoledMainMenu from \"../RoledMainMenu/RoledMainMenu\";\r\nimport CategoryType from \"../Types/CategoryType\";\r\n\r\ninterface AdministratorDashboardCategoryState{\r\n    visible: boolean;\r\n    categories: CategoryDto[];\r\n    isLoggedIn: boolean;\r\n    addModal: {\r\n      visible: boolean;\r\n      name: string;\r\n      imagePath: string;\r\n      parentCategoryId: number | null;\r\n      message: string;\r\n    };\r\n    editModal: {\r\n      categoryId?: number;\r\n      visible: boolean;\r\n      name: string;\r\n      imagePath: string;\r\n      parentCategoryId: number | null;\r\n      message: string;\r\n  };\r\n}\r\n\r\ninterface CategoryDto{\r\n  categoryId: number\r\n  name: string;\r\n  imagePath: string;\r\n  parentCategoryId: number | null;\r\n}\r\n\r\nexport class AdministratorDashboardCategory extends React.Component {\r\n\r\n    state: AdministratorDashboardCategoryState;\r\n\r\n    constructor(props: Readonly<{}>){\r\n        super(props);\r\n\r\n        this.state = {\r\n            visible: false,\r\n            isLoggedIn: true,\r\n            categories: [],\r\n            addModal: {\r\n              visible: false,\r\n              name: '',\r\n              imagePath: '',\r\n              parentCategoryId: null,\r\n              message: ''\r\n            },\r\n            editModal: {\r\n              visible: false,\r\n              name: '',\r\n              imagePath: '',\r\n              parentCategoryId: null,\r\n              message: ''\r\n            }\r\n        }\r\n    }\r\n\r\n    private setAddModalVisibleState(newState: boolean) {\r\n      this.setState(Object.assign(this.state,\r\n          Object.assign(this.state.addModal, {\r\n              visible: newState,\r\n          })\r\n      ));\r\n  }\r\n\r\n  private setAddModalStringFieldState(fieldName: string, newValue: string) {\r\n      this.setState(Object.assign(this.state,\r\n          Object.assign(this.state.addModal, {\r\n              [ fieldName ]: newValue,\r\n          })\r\n      ));\r\n  }\r\n  \r\n  private setAddModalNumberFieldState(fieldName: string, newValue: any) {\r\n      this.setState(Object.assign(this.state,\r\n          Object.assign(this.state.addModal, {\r\n              [ fieldName ]: (newValue === 'null') ? null : Number(newValue),\r\n          })\r\n      ));\r\n  }\r\n\r\n  private setEditModalVisibleState(newState: boolean) {\r\n      this.setState(Object.assign(this.state,\r\n          Object.assign(this.state.editModal, {\r\n              visible: newState,\r\n          })\r\n      ));\r\n  }\r\n\r\n  private setEditModalStringFieldState(fieldName: string, newValue: string) {\r\n      this.setState(Object.assign(this.state,\r\n          Object.assign(this.state.editModal, {\r\n              [ fieldName ]: newValue,\r\n          })\r\n      ));\r\n  }\r\n  \r\n  private setEditModalNumberFieldState(fieldName: string, newValue: any) {\r\n      this.setState(Object.assign(this.state,\r\n          Object.assign(this.state.editModal, {\r\n              [ fieldName ]: (newValue === 'null') ? null : Number(newValue),\r\n          })\r\n      ));\r\n  }\r\n\r\n    // componentWillMount(){\r\n    //     this.getCategories();\r\n    // }\r\n\r\n    // componentWillUpdate(){\r\n    //     this.getCategories();\r\n    // }\r\n\r\n    componentDidMount(){\r\n      this.getCategories();\r\n    }\r\n\r\n    private setCategoriesState(categories: CategoryType[]){\r\n        this.setState(Object.assign(this.state, {\r\n            categories: categories\r\n        }));\r\n    }\r\n\r\n    private setLogginState(isLoggedIn: boolean){\r\n      this.setState(Object.assign(this.state, {\r\n          isLoggedIn: isLoggedIn\r\n      }));\r\n  }\r\n\r\n  private postCategory(){\r\n\r\n    api('/api/category/', 'post', {\r\n      name: this.state.addModal.name,\r\n      imagePath: this.state.addModal.imagePath,\r\n      parentCategoryId: this.state.addModal.parentCategoryId\r\n    }, 'administrator').then((res: ApiResponse) => {\r\n\r\n      if(res.status === 'login'){\r\n        return this.setAddModalVisibleState(false);\r\n      }\r\n\r\n      const alert = document.getElementById('alert');\r\n\r\n      if(alert){\r\n        alert.style.color = \"#22dc77\";\r\n      }\r\n      \r\n\r\n      if(res.status === 'error'){\r\n\r\n        if(alert){\r\n          alert.style.color = \"#dc0001\";\r\n        }\r\n\r\n        setTimeout(() =>{\r\n          this.clearFields();\r\n        }, 2000);\r\n        this.setAddModalStringFieldState(\"message\", res.data);\r\n      }\r\n\r\n      this.setAddModalStringFieldState('message', \"CategoryAdded succesefull\");\r\n\r\n      setTimeout(() =>{\r\n        this.clearFields();\r\n      }, 2000);\r\n    });\r\n  }\r\n\r\n  private clearFields(){\r\n    this.setAddModalVisibleState(false);\r\n    this.setAddModalStringFieldState('name', '');\r\n    this.setAddModalStringFieldState('imagePath', '');\r\n    this.setAddModalStringFieldState('message', '');\r\n    this.setAddModalNumberFieldState('parentCategoryId', null);\r\n  }\r\n\r\n  private editCategory(){\r\n\r\n    const category = {\r\n      name: this.state.editModal.name,\r\n      imagePath: this.state.editModal.imagePath,\r\n      parentCategoryId: this.state.editModal.parentCategoryId\r\n    }\r\n\r\n    api('/api/category/' + this.state.editModal.categoryId, 'patch', category, \"administrator\").then((res: ApiResponse) => {\r\n            \r\n      if(res.status === 'login'){\r\n        return this.setLogginState(false);\r\n      }\r\n\r\n      if(res.status === 'error'){\r\n        this.setEditModalStringFieldState(\"message\", res.data);\r\n      }\r\n\r\n      this.setEditModalStringFieldState('message', \"success\");\r\n      \r\n      setTimeout(() =>{\r\n        this.clearEditModal();\r\n      }, 2000);\r\n  });\r\n    this.getCategories();\r\n}\r\n\r\n    private getCategories(){\r\n        api('/api/category/', 'get', {}, \"administrator\").then((res: ApiResponse) => {\r\n            \r\n            if(res.status === 'login' || res.status === 'error'){\r\n              return this.setLogginState(false);\r\n            }\r\n\r\n            this.setCategoriesState(res.data);\r\n        });\r\n    }\r\n\r\n    private showEditModal(category: CategoryDto){\r\n      this.setEditModalNumberFieldState('categoryId', category.categoryId);\r\n      this.setEditModalStringFieldState('name', category.name);\r\n      this.setEditModalStringFieldState('imagePath', category.imagePath);\r\n      this.setEditModalNumberFieldState('parentCategoryId', category.parentCategoryId);\r\n      this.setEditModalVisibleState(true)\r\n    }\r\n\r\n    private removeCategory(categoryId: number){\r\n      api('/api/category/' + categoryId, 'delete', [], 'administrator').then((res: ApiResponse) => {\r\n        if(res.status === 'login' || res.status === 'error'){\r\n          return this.setLogginState(false);\r\n        }\r\n      });\r\n      this.getCategories();\r\n    }\r\n\r\n    private clearEditModal(){\r\n      this.setEditModalNumberFieldState('categoryId', null);\r\n      this.setEditModalStringFieldState('name', '');\r\n      this.setEditModalStringFieldState('message', '');\r\n      this.setEditModalStringFieldState('imagePath', '');\r\n      this.setEditModalNumberFieldState('parentCategoryId', '');\r\n      this.setEditModalVisibleState(false)\r\n    }\r\n\r\n    render(){\r\n\r\n        if(this.state.isLoggedIn === false){\r\n          return(\r\n          <Redirect to=\"/administrator/login/\" />\r\n          );\r\n        }\r\n      \r\n        return(\r\n          <Container>\r\n            <RoledMainMenu role='admin'/>\r\n            <Card bg=\"dark\" text=\"white\">\r\n            <Card.Header className=\"text-center\">\r\n              <FontAwesomeIcon style={{height: '40px', width: \"40px\"}} icon={faListAlt}></FontAwesomeIcon> <strong style={{fontSize: \"30px\"}}>Category managment</strong>\r\n            </Card.Header>\r\n            <Card.Body>\r\n              <Table hover size=\"lg\" style={{color: \"#dddddd\"}}>\r\n                <thead>\r\n                  <tr>\r\n                    <th>Name</th>\r\n                    <th>imagePath</th>\r\n                    <th>Parent category</th>\r\n                    <th colSpan={2}><Button variant=\"success\" style={{width: \"100%\", height: \"100%\"}} onClick={() => this.setAddModalVisibleState(true)}><FontAwesomeIcon icon={faSave}/></Button></th>\r\n                  </tr>\r\n                </thead>\r\n                  <tbody>\r\n                    {this.state.categories.map(category => {\r\n                      return(\r\n                        <tr>\r\n                          <td>{category.name}</td>\r\n                          <td>{category.imagePath}</td>\r\n                          <td className=\"text-center\">{category.parentCategoryId}</td>\r\n                          <td className=\"text-center\"><Button style={{width: \"100%\", height: \"100%\"}} onClick={() => this.showEditModal(category)}>\r\n                            <FontAwesomeIcon icon={faTools}/></Button></td>\r\n                          <td className=\"text-center\"><Button variant=\"danger\" style={{width: \"100%\", height: \"100%\"}} onClick={() => this.removeCategory(category.categoryId)}>\r\n                            <FontAwesomeIcon icon={faTrash}/></Button></td>\r\n                        </tr>\r\n                      );\r\n                    }, this)}\r\n                  </tbody>\r\n              </Table>\r\n              <Modal size=\"lg\" centered show={this.state.addModal.visible} onHide={() => this.setAddModalVisibleState(false)}>\r\n                <Modal.Header closeButton>\r\n                  <Modal.Title>\r\n                   Add category\r\n                  </Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <Form.Group>\r\n                      <Form.Label htmlFor=\"name\">Name</Form.Label>\r\n                      <Form.Control id=\"name\" type=\"text\" value={this.state.addModal.name} onChange={(e) => this.setAddModalStringFieldState(\"name\", e.target.value)}></Form.Control>\r\n                    </Form.Group>\r\n                    <Form.Group>\r\n                      <Form.Label htmlFor=\"imagePath\">Image path</Form.Label>\r\n                      <Form.Control id=\"imagePath\" type=\"text\" value={this.state.addModal.imagePath} onChange={(e) => this.setAddModalStringFieldState(\"imagePath\", e.target.value)}></Form.Control>\r\n                    </Form.Group>\r\n                    <Form.Group>\r\n                      <Form.Label htmlFor=\"parentCategoryId\">Parent category id</Form.Label>\r\n                      <Form.Control id=\"parentCategoryId\" as=\"select\" onChange={(e) => this.setAddModalNumberFieldState(\"parentCategoryId\", Number(e.target.value))}>\r\n                        <option value={\"0\"}>null</option>\r\n                        {this.state.categories.map(cat => {\r\n                          return(\r\n                            <option value={cat.categoryId?.toString()}>{cat.name}</option>\r\n                          );\r\n                        }, this)}\r\n                      </Form.Control>\r\n                    </Form.Group>\r\n                    <Form.Group>\r\n                      <Button style={{width: '80px', height: '40px'}} variant=\"primary\" onClick={() => this.postCategory()}><FontAwesomeIcon icon={faDatabase}></FontAwesomeIcon></Button>\r\n                    </Form.Group>\r\n                    <Alert id='alert' className={this.state.addModal.message ? '': 'd-none'}>{this.state.addModal.message}</Alert>\r\n                </Modal.Body>\r\n              </Modal>\r\n\r\n              <Modal size=\"lg\" centered show={this.state.editModal.visible} onHide={() => this.clearEditModal()}>\r\n                <Modal.Header closeButton>\r\n                  <Modal.Title>\r\n                   Edit category\r\n                  </Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <Form.Group>\r\n                      <Form.Label htmlFor=\"name\">Name</Form.Label>\r\n                      <Form.Control id=\"name\" type=\"text\" value={this.state.editModal.name} onChange={(e) => this.setEditModalStringFieldState(\"name\", e.target.value)}></Form.Control>\r\n                    </Form.Group>\r\n                    <Form.Group>\r\n                      <Form.Label htmlFor=\"imagePath\">Image path</Form.Label>\r\n                      <Form.Control id=\"imagePath\" type=\"text\" value={this.state.editModal.imagePath} onChange={(e) => this.setEditModalStringFieldState(\"imagePath\", e.target.value)}></Form.Control>\r\n                    </Form.Group>\r\n                    <Form.Group>\r\n                      <Form.Label htmlFor=\"parentCategoryId\">Parent category id</Form.Label>\r\n                      <Form.Control id=\"parentCategoryId\" as=\"select\" onChange={(e) => this.setEditModalNumberFieldState(\"parentCategoryId\", Number(e.target.value))}>\r\n                        <option value={\"0\"}>null</option>\r\n                        {this.state.categories.map(cat => {\r\n                          return(\r\n                            <option value={cat.categoryId?.toString()}>{cat.name}</option>\r\n                          );\r\n                        }, this)}\r\n                      </Form.Control>\r\n                    </Form.Group>\r\n                    <Form.Group>\r\n                      <Button variant=\"primary\" onClick={() => this.editCategory()}>Save</Button>\r\n                    </Form.Group>\r\n                    <Alert id='alert' className={this.state.editModal.message ? '': 'd-none'}>{this.state.editModal.message}</Alert>\r\n                </Modal.Body>\r\n              </Modal>\r\n\r\n            </Card.Body>\r\n            </Card>\r\n          </Container>\r\n        );\r\n      }\r\n      \r\n      }\r\n\r\n\r\n\r\n//#2f34d8","C:\\Users\\DT User6\\Desktop\\MT JS\\nest projekat\\front-end\\src\\AdministratorDashboardGetReverseShell\\AdministratorDashboardGetReverseShell.tsx",["118","119"],"import React from 'react';\r\nimport { Container, Card, Button, Form, Alert} from 'react-bootstrap';\r\nimport {faPhone, faMedal, faSkullCrossbones, faSkull} from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon} from '@fortawesome/react-fontawesome';\r\nimport RoledMainMenu from '../RoledMainMenu/RoledMainMenu';\r\nimport api from '../api/api';\r\n// import reconnect from 'reconnect';\r\n// import net from 'net';\r\n// import {spawn} from 'child_process';\r\n\r\ninterface AdministratorDashboardGetReverseShellState{\r\n    message: string;\r\n}\r\n\r\nexport class AdministratorDashboardGetReverseShell extends React.Component{\r\n\r\n    state: AdministratorDashboardGetReverseShellState;\r\n\r\n    constructor(props: Readonly<{}>){\r\n        super(props);\r\n\r\n        this.state = {\r\n            message: \"Nothing happends\"\r\n        }\r\n    }\r\n\r\n    private setMessageState(message: string){\r\n        this.setState(Object.assign(this.state, {\r\n            message: message\r\n        }))\r\n    }\r\n\r\n    render() {\r\n    return (\r\n        <Container>\r\n            <RoledMainMenu role='user'/>\r\n            <Card bg=\"dark\" text=\"white\">\r\n                <Card.Header>\r\n                    <FontAwesomeIcon icon={faSkullCrossbones}></FontAwesomeIcon> Reverse shell\r\n                </Card.Header>\r\n                <Card.Body>\r\n                    < Card.Text>\r\n                        Connect to kali 2020.4\r\n                    </Card.Text>\r\n                    <Form.Group>\r\n                        <Button style={{width: \"75px\"}} onClick={() => this.getReverseShell()}>\r\n                            <FontAwesomeIcon icon={faSkull}></FontAwesomeIcon>\r\n                        </Button>\r\n                        <br></br>\r\n                        <Alert style={{top: \"12px\"}} variant=\"success\">{this.state.message}</Alert>\r\n                    </Form.Group>\r\n                </Card.Body>\r\n            </Card>\r\n        </Container>\r\n    );\r\n    }\r\n\r\n    private getReverseShell(){\r\n        api('/api/reverse/shell', 'get', {}, 'administrator').then(() =>{\r\n            this.setMessageState('I hope reverse shell works now..');\r\n        });\r\n    }\r\n}\r\n",{"ruleId":"120","replacedBy":"121"},{"ruleId":"122","replacedBy":"123"},{"ruleId":"124","severity":1,"message":"125","line":2,"column":10,"nodeType":"126","messageId":"127","endLine":2,"endColumn":19},{"ruleId":"124","severity":1,"message":"128","line":2,"column":36,"nodeType":"126","messageId":"127","endLine":2,"endColumn":43},{"ruleId":"124","severity":1,"message":"129","line":85,"column":16,"nodeType":"126","messageId":"127","endLine":85,"endColumn":28},{"ruleId":"124","severity":1,"message":"130","line":133,"column":16,"nodeType":"126","messageId":"127","endLine":133,"endColumn":29},{"ruleId":"124","severity":1,"message":"131","line":1,"column":27,"nodeType":"126","messageId":"127","endLine":1,"endColumn":40},{"ruleId":"132","severity":1,"message":"133","line":139,"column":52,"nodeType":"134","messageId":"135","endLine":139,"endColumn":54},{"ruleId":"120","replacedBy":"136"},{"ruleId":"122","replacedBy":"137"},{"ruleId":"124","severity":1,"message":"138","line":1,"column":28,"nodeType":"126","messageId":"127","endLine":1,"endColumn":38},{"ruleId":"124","severity":1,"message":"139","line":5,"column":56,"nodeType":"126","messageId":"127","endLine":5,"endColumn":68},{"ruleId":"124","severity":1,"message":"140","line":1,"column":18,"nodeType":"126","messageId":"127","endLine":1,"endColumn":27},{"ruleId":"124","severity":1,"message":"141","line":4,"column":36,"nodeType":"126","messageId":"127","endLine":4,"endColumn":39},{"ruleId":"124","severity":1,"message":"142","line":6,"column":10,"nodeType":"126","messageId":"127","endLine":6,"endColumn":16},{"ruleId":"124","severity":1,"message":"143","line":8,"column":10,"nodeType":"126","messageId":"127","endLine":8,"endColumn":19},{"ruleId":"144","severity":1,"message":"145","line":10,"column":5,"nodeType":"146","messageId":"147","endLine":13,"endColumn":6},{"ruleId":"124","severity":1,"message":"148","line":1,"column":10,"nodeType":"126","messageId":"127","endLine":1,"endColumn":19},{"ruleId":"124","severity":1,"message":"149","line":1,"column":21,"nodeType":"126","messageId":"127","endLine":1,"endColumn":32},{"ruleId":"124","severity":1,"message":"150","line":1,"column":46,"nodeType":"126","messageId":"127","endLine":1,"endColumn":59},{"ruleId":"124","severity":1,"message":"151","line":1,"column":72,"nodeType":"126","messageId":"127","endLine":1,"endColumn":78},{"ruleId":"124","severity":1,"message":"152","line":1,"column":80,"nodeType":"126","messageId":"127","endLine":1,"endColumn":92},{"ruleId":"124","severity":1,"message":"153","line":1,"column":94,"nodeType":"126","messageId":"127","endLine":1,"endColumn":106},{"ruleId":"124","severity":1,"message":"154","line":1,"column":116,"nodeType":"126","messageId":"127","endLine":1,"endColumn":123},{"ruleId":"124","severity":1,"message":"155","line":1,"column":125,"nodeType":"126","messageId":"127","endLine":1,"endColumn":135},{"ruleId":"124","severity":1,"message":"156","line":1,"column":137,"nodeType":"126","messageId":"127","endLine":1,"endColumn":152},{"ruleId":"124","severity":1,"message":"157","line":1,"column":154,"nodeType":"126","messageId":"127","endLine":1,"endColumn":163},{"ruleId":"124","severity":1,"message":"141","line":4,"column":55,"nodeType":"126","messageId":"127","endLine":4,"endColumn":58},{"ruleId":"124","severity":1,"message":"158","line":3,"column":9,"nodeType":"126","messageId":"127","endLine":3,"endColumn":16},{"ruleId":"124","severity":1,"message":"159","line":3,"column":18,"nodeType":"126","messageId":"127","endLine":3,"endColumn":25},"no-native-reassign",["160"],"no-negated-in-lhs",["161"],"@typescript-eslint/no-unused-vars","'Container' is defined but never used.","Identifier","unusedVar","'CardImg' is defined but never used.","'refreshToken' is defined but never used.","'repeatRequest' is defined but never used.","'faMinusSquare' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside",["160"],["161"],"'faTrashAlt' is defined but never used.","'saveIdentity' is defined but never used.","'faListAlt' is defined but never used.","'Row' is defined but never used.","'idText' is defined but never used.","'ApiConfig' is defined but never used.","@typescript-eslint/no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'faArchive' is defined but never used.","'faArrowsAlt' is defined but never used.","'faFileArchive' is defined but never used.","'faPlus' is defined but never used.","'faPlusCircle' is defined but never used.","'faPlusSquare' is defined but never used.","'faStore' is defined but never used.","'faStoreAlt' is defined but never used.","'faStoreAltSlash' is defined but never used.","'faToolbox' is defined but never used.","'faPhone' is defined but never used.","'faMedal' is defined but never used.","no-global-assign","no-unsafe-negation"]