[{"C:\\Users\\DT User6\\Desktop\\MT JS\\nest projekat\\front-end\\src\\index.tsx":"1","C:\\Users\\DT User6\\Desktop\\MT JS\\nest projekat\\front-end\\src\\reportWebVitals.ts":"2","C:\\Users\\DT User6\\Desktop\\MT JS\\nest projekat\\front-end\\src\\MainMenu\\MainMenu.tsx":"3","C:\\Users\\DT User6\\Desktop\\MT JS\\nest projekat\\front-end\\src\\HomePage.tsx":"4","C:\\Users\\DT User6\\Desktop\\MT JS\\nest projekat\\front-end\\src\\ContactPage\\ContactPage.tsx":"5","C:\\Users\\DT User6\\Desktop\\MT JS\\nest projekat\\front-end\\src\\AboutUsPage\\AboutUsPage.tsx":"6","C:\\Users\\DT User6\\Desktop\\MT JS\\nest projekat\\front-end\\src\\Category\\CategoryPage.tsx":"7","C:\\Users\\DT User6\\Desktop\\MT JS\\nest projekat\\front-end\\src\\UserLoginPage\\UserLoginPage.tsx":"8","C:\\Users\\DT User6\\Desktop\\MT JS\\nest projekat\\front-end\\src\\api\\api.tsx":"9","C:\\Users\\DT User6\\Desktop\\MT JS\\nest projekat\\front-end\\src\\config\\ApiConfig.tsx":"10","C:\\Users\\DT User6\\Desktop\\MT JS\\nest projekat\\front-end\\src\\UserRegistrationPage\\UserRegistrationPage.tsx":"11","C:\\Users\\DT User6\\Desktop\\MT JS\\nest projekat\\front-end\\src\\SingleArticlePreview\\SingleArticlePreview.tsx":"12","C:\\Users\\DT User6\\Desktop\\MT JS\\nest projekat\\front-end\\src\\Cart\\CartPage.tsx":"13","C:\\Users\\DT User6\\Desktop\\MT JS\\nest projekat\\front-end\\src\\OrderPage\\OrderPage.tsx":"14"},{"size":2070,"mtime":1615326406927,"results":"15","hashOfConfig":"16"},{"size":425,"mtime":499162500000,"results":"17","hashOfConfig":"16"},{"size":1814,"mtime":1614981048011,"results":"18","hashOfConfig":"16"},{"size":2432,"mtime":1615221901997,"results":"19","hashOfConfig":"16"},{"size":1626,"mtime":1610896576444,"results":"20","hashOfConfig":"16"},{"size":801,"mtime":1614886120249,"results":"21","hashOfConfig":"16"},{"size":15489,"mtime":1615222837437,"results":"22","hashOfConfig":"16"},{"size":4140,"mtime":1614985003756,"results":"23","hashOfConfig":"16"},{"size":3458,"mtime":1610896574963,"results":"24","hashOfConfig":"16"},{"size":146,"mtime":1611183865415,"results":"25","hashOfConfig":"16"},{"size":7240,"mtime":1614985008032,"results":"26","hashOfConfig":"16"},{"size":3114,"mtime":1615065000533,"results":"27","hashOfConfig":"16"},{"size":7263,"mtime":1615325692324,"results":"28","hashOfConfig":"16"},{"size":8835,"mtime":1615421897513,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"14bqd3n",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"32"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"32"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"32"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\DT User6\\Desktop\\MT JS\\nest projekat\\front-end\\src\\index.tsx",[],["62","63"],"C:\\Users\\DT User6\\Desktop\\MT JS\\nest projekat\\front-end\\src\\reportWebVitals.ts",[],"C:\\Users\\DT User6\\Desktop\\MT JS\\nest projekat\\front-end\\src\\MainMenu\\MainMenu.tsx",[],"C:\\Users\\DT User6\\Desktop\\MT JS\\nest projekat\\front-end\\src\\HomePage.tsx",[],"C:\\Users\\DT User6\\Desktop\\MT JS\\nest projekat\\front-end\\src\\ContactPage\\ContactPage.tsx",[],"C:\\Users\\DT User6\\Desktop\\MT JS\\nest projekat\\front-end\\src\\AboutUsPage\\AboutUsPage.tsx",[],"C:\\Users\\DT User6\\Desktop\\MT JS\\nest projekat\\front-end\\src\\Category\\CategoryPage.tsx",["64","65"],"import React from 'react';\r\nimport {Container, Card, Row, Col, CardImg, Form, Button} from 'react-bootstrap';\r\nimport {faArchway, faListAlt, faSearch} from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon} from '@fortawesome/react-fontawesome';\r\nimport CategoryType from '../Types/CategoryType';\r\nimport api, { ApiResponse } from '../api/api';\r\nimport ArticleType from '../Types/ArticleType';\r\nimport { Link, Redirect } from 'react-router-dom';\r\nimport { ApiConfig } from '../config/ApiConfig';\r\nimport SingleArticlePreview from '../SingleArticlePreview/SingleArticlePreview';\r\n\r\ninterface CategoryPageProperties{\r\n    match: {\r\n        params: {\r\n            id: number;\r\n        }\r\n    }\r\n}\r\n\r\ninterface CategoryPageState{\r\n    category?: CategoryType;\r\n    articles?: ArticleType[];\r\n    message?: string;\r\n    subcategories?: CategoryType[];\r\n    isLoggedIn: boolean;\r\n    filters: {\r\n        keywords: string;\r\n        priceMin: number;\r\n        priceMax: number;\r\n        order: \"name asc\" | \"name desc\" | \"price asc\" | \"price desc\";\r\n        selectedFeatures: {\r\n            featureId: number;\r\n            value: string;\r\n        }[];\r\n    };\r\n    features: {\r\n        featureId: number;\r\n        name: string;\r\n        values: string[];\r\n    }[];\r\n}\r\n\r\ninterface CategoryDto{\r\n    categoryId: number;\r\n    name: string;\r\n}\r\n\r\ninterface ArticleDto{\r\n    articleId: number;\r\n    name: string;\r\n    excerpt: string;\r\n    description: string;\r\n    articlePrices:{\r\n        price?: number,\r\n        createdAt?: string\r\n    }[],\r\n    photos: {\r\n        imagePath: string\r\n    }[]\r\n}\r\n\r\nexport default class CategoryPage extends React.Component<CategoryPageProperties>{\r\n\r\n    state: CategoryPageState;\r\n\r\n    constructor(props: Readonly<CategoryPageProperties>){\r\n        super(props);\r\n\r\n        this.state = {\r\n            isLoggedIn: false,\r\n            filters: {\r\n                keywords: \"\",\r\n                priceMin: 0.01,\r\n                priceMax: 100000,\r\n                order: \"price asc\",\r\n                selectedFeatures: []\r\n            },\r\n            features: []\r\n        };\r\n    }\r\n\r\n    private setLogginState(isLoggedIn: boolean){\r\n        const newState = Object.assign(this.state,\r\n            { isLoggedIn: isLoggedIn });\r\n\r\n            this.setState(newState);\r\n    }\r\n\r\n    private printOptionalMessage(){\r\n        if(this.state.message !== ''){\r\n            return(\r\n                <Card.Text>{this.state.message}</Card.Text>\r\n            );\r\n        }\r\n    }\r\n\r\n    private setSubcategories(subcategories: CategoryType[]){\r\n\r\n        const newState = Object.assign(this.state, {\r\n            subcategories: subcategories\r\n        })\r\n\r\n        this.setState(newState);\r\n    }\r\n\r\n    private setArticles(articles: ArticleType[]){\r\n\r\n        const newState = Object.assign(this.state, {\r\n            articles: articles\r\n        })\r\n\r\n        this.setState(newState);\r\n    }\r\n\r\n    private setMessage(message: string){\r\n\r\n        const newState = Object.assign(this.state, {\r\n            message: message\r\n        })\r\n\r\n        this.setState(newState);\r\n    }\r\n\r\n    private setCategoryData(categoryData: CategoryType){\r\n\r\n        const newState = Object.assign(this.state, {\r\n            category: categoryData\r\n        })\r\n\r\n        this.setState(newState);\r\n    }\r\n\r\n    private setFeatures(features: {featureID: number; name: string; values: string[];}){\r\n        const newState = Object.assign(this.state, { features: features });\r\n\r\n        this.setState(newState);\r\n    }\r\n\r\n    private setSelectedFeatures(features: {featureId: number, value: string}[]){\r\n        const newState = Object.assign(this.state.filters, {\r\n            selectedFeatures: features\r\n        })\r\n\r\n        this.setState(newState);\r\n    }\r\n\r\n    render(){\r\n\r\n        if(!this.state.isLoggedIn){\r\n            <Redirect to=\"/login\"></Redirect>\r\n        }\r\n\r\n        return(\r\n            <Container>\r\n                <Card bg=\"dark\" text=\"primary\">\r\n                    <Card.Header><FontAwesomeIcon icon={faArchway}></FontAwesomeIcon> Categories </Card.Header>\r\n                    <Card.Body>\r\n                        <Card.Title>\r\n                        <FontAwesomeIcon icon={faListAlt}></FontAwesomeIcon>\r\n                             {this.state.category?.name}\r\n                        </Card.Title>\r\n                        <Container>\r\n                            {this.printOptionalMessage()}\r\n                            {this.showSubcategories()}\r\n                            <Row>\r\n                                <Col xs=\"12\" md=\"4\" lg=\"3\">\r\n                                    {this.printFilters()}\r\n                                </Col>\r\n                                <Col xs=\"12\" md=\"8\" lg=\"9\">\r\n                                    {this.showArticles()}\r\n                                </Col>\r\n                            </Row>\r\n                        </Container>\r\n                    </Card.Body>\r\n                </Card>\r\n            </Container>\r\n        );\r\n    }\r\n\r\n    private printFilters(){\r\n        return(\r\n            <>\r\n            <Form.Group>\r\n                <Form.Label htmlFor=\"keywords\">Search keywords: </Form.Label>\r\n                <Form.Control type=\"text\" id=\"keywords\" value={this.state.filters.keywords} onChange={(e) =>\r\n                     {this.filtersKeywordChange(e as any)}}></Form.Control>\r\n            </Form.Group>\r\n            <Form.Group>\r\n                <Row>\r\n                    <Col xs=\"12\" sm=\"6\">\r\n                    <Form.Label htmlFor=\"priceMin\">Min. price: </Form.Label>\r\n                    <Form.Control type=\"number\" id=\"priceMin\" value={this.state.filters.priceMin} onChange={(e) => {this.filtersMinPriceChanged(e as any)}} \r\n                    min=\"0.01\" max=\"99999.99\" step=\"0.01\"></Form.Control>\r\n                    </Col>\r\n                    <Col xs=\"12\" sm=\"6\">\r\n                    <Form.Label htmlFor=\"priceMax\">Max. price: : </Form.Label>\r\n                    <Form.Control type=\"number\" id=\"priceMax\" value={this.state.filters.priceMax} onChange={(e) => {this.filtersMaxPriceChanged(e as any)}} \r\n                    min=\"0.01\" max=\"99999.99\" step=\"0.01\"></Form.Control>\r\n                    </Col>\r\n                </Row>\r\n            </Form.Group>\r\n            <Form.Group>\r\n                <Form.Control as=\"select\" id=\"sortOrder\" value={this.state.filters.order} onChange={ (e) => this.filterOrderChanged(e as any)}>\r\n                    <option value=\"name asc\">Sort by name - asc</option>\r\n                    <option value=\"name desc\">Sort by name - desc</option>\r\n                    <option value=\"price asc\">Sort by price - asc</option>\r\n                    <option value=\"price desc\">Sort by price - desc</option>\r\n                </Form.Control>\r\n            </Form.Group>\r\n            <h2>Features</h2>\r\n            {this.state.features.map(component => this.printFeatureFilterComponent(component))}\r\n            <Form.Group>\r\n                <Button variant=\"primary\" block onClick={(e) => this.applyFilters()}><FontAwesomeIcon icon={faSearch}></FontAwesomeIcon>Search</Button>\r\n            </Form.Group>\r\n            </>\r\n\r\n        );\r\n    }\r\n\r\n    private setNewFilter(newFilter: any){\r\n        this.setState(Object.assign(this.state, {\r\n            filter: newFilter\r\n        })\r\n        )\r\n    }\r\n\r\n    private applyFilters(){\r\n        this.getCatData();\r\n    }\r\n\r\n    private filtersMinPriceChanged(event: React.ChangeEvent<HTMLInputElement>){\r\n        this.setNewFilter(Object.assign(this.state.filters, { priceMin: Number(event.target.value) }));\r\n    }\r\n\r\n    private filtersMaxPriceChanged(event: React.ChangeEvent<HTMLInputElement>){\r\n        this.setNewFilter(Object.assign(this.state.filters, { priceMax: Number(event.target.value) }));\r\n    }\r\n\r\n    private filtersKeywordChange(event: React.ChangeEvent<HTMLInputElement>){\r\n        this.setNewFilter(Object.assign(this.state.filters, { keywords: event.target.value }));\r\n    }\r\n\r\n    private filterOrderChanged(event: React.ChangeEvent<HTMLSelectElement>){\r\n        this.setNewFilter(Object.assign(this.state.filters, { order: event.target.value }));\r\n    }\r\n\r\n    private featureFilterChanged(event: React.ChangeEvent<HTMLInputElement>){\r\n        \r\n        const featureId = event.target.dataset.featureId;\r\n        const value = event.target.value;\r\n\r\n        if(event.target.checked){\r\n            this.addFeatureFilterValue(Number(featureId), value);\r\n        }else{\r\n            this.removeFeatureFilterValue(Number(featureId), value);\r\n        }\r\n    }\r\n\r\n    private addFeatureFilterValue(featureId: number, value: string){\r\n        \r\n        const newSelectedFeature = [...this.state.filters.selectedFeatures];\r\n        newSelectedFeature.push({\r\n            featureId: featureId,\r\n            value: value\r\n        });\r\n\r\n        this.setSelectedFeatures(newSelectedFeature);\r\n    }\r\n\r\n    private removeFeatureFilterValue(featureId: number, value: string){\r\n        const newSelectedFeatures = this.state.filters.selectedFeatures.filter(record => {\r\n            return !(record.featureId === featureId && record.value === value);\r\n        });\r\n\r\n        this.setSelectedFeatures(newSelectedFeatures);\r\n    }\r\n\r\n    componentWillMount(){\r\n        this.getCatData();\r\n    }\r\n\r\n    componentWillReceiveProps(newProps: CategoryPageProperties){\r\n        if(newProps.match.params.id === this.props.match.params.id){\r\n            return;\r\n        }\r\n        this.getCatData();\r\n    }\r\n\r\n    private getCatData(){\r\n       \r\n        api('api/category/' + this.props.match.params.id, 'get', {}).then((res: ApiResponse) =>{\r\n\r\n            if(res.status === 'login' || res.status === 'error'){ return this.setLogginState(false); }\r\n            \r\n            const categoryData: CategoryDto = {\r\n                categoryId: res.data.categoryId,\r\n                name: res.data.name\r\n            }\r\n        \r\n            this.setCategoryData(categoryData);\r\n\r\n            const subcategories: CategoryType[] = [];\r\n\r\n            if(res.data.categories.length > 0){\r\n\r\n                for(let category of res.data.categories){\r\n                    subcategories.push({\r\n                        categoryId: category.categoryId,\r\n                        name: category.name\r\n                    })\r\n                }\r\n\r\n                this.setSubcategories(subcategories);\r\n            }    \r\n        });     \r\n\r\n        const orderParts = this.state.filters.order.split(' ');\r\n        const orderBy = orderParts[0];\r\n        const orderDirection = orderParts[1].toUpperCase();\r\n\r\n        const featureFilters: any[] = [];\r\n        \r\n        for(const item of this.state.filters.selectedFeatures){\r\n\r\n            let found = false;\r\n            let foundRef = null;\r\n            \r\n            for(const featureFilter of featureFilters){\r\n                if(featureFilter.featureId ===  item.featureId){\r\n                    found = true;\r\n                    foundRef = featureFilter;\r\n                    break;\r\n                }\r\n            }\r\n            if(!found){\r\n                featureFilters.push({featureId: item.featureId, value: [item.value]});\r\n            }else{\r\n                foundRef.value.push(item.value);\r\n            }\r\n        }\r\n\r\n        api('/api/article/search', 'post', {\r\n            categoryId: this.props.match.params.id,\r\n            keywords: this.state.filters.keywords,\r\n            priceMin: this.state.filters.priceMin,\r\n            priceMax: this.state.filters.priceMax,\r\n            features: featureFilters,\r\n            orederBy: orderBy,\r\n            orderDirection: orderDirection\r\n        }).then((res: ApiResponse) =>{\r\n\r\n            if(res.status === 'login' || res.status === 'error'){ return this.setLogginState(false); }\r\n\r\n            if(res.data.statusCode === 0){\r\n                return this.setMessage('No articles found');\r\n            }\r\n\r\n            const articles: ArticleType[] = res.data.map((article: ArticleDto) => {\r\n\r\n                const object: ArticleType = {\r\n                    articleId: article.articleId,\r\n                    name: article.name,\r\n                    excerpt: article.excerpt,\r\n                    description: article.description,\r\n                    imageUrl: '',\r\n                    price: 0\r\n                }\r\n\r\n                if(article.photos !== undefined && article.photos?.length > 0){\r\n                    object.imageUrl = article.photos[article.photos.length -1].imagePath;\r\n                }\r\n\r\n                if(article.articlePrices !== undefined && article.articlePrices?.length > 0){\r\n                    object.price = article.articlePrices[article.articlePrices.length -1].price;\r\n                }\r\n\r\n                return object;\r\n            });\r\n\r\n            this.setArticles(articles);\r\n        });\r\n\r\n        this.getFeatures();\r\n    }\r\n\r\n    private getFeatures(){\r\n        api('api/feature/values/' + this.props.match.params.id, 'get', {})\r\n        .then((res: ApiResponse) =>{\r\n\r\n            if(res.status === 'login'){\r\n                return this.setLogginState(false);\r\n            }\r\n\r\n            if(res.status === 'error'){\r\n                return this.setMessage('Try to refresh page, we have an error there');\r\n            }\r\n\r\n            this.setFeatures(res.data.features);\r\n        })\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.getCatData();\r\n    }\r\n\r\n    private showSubcategories(){\r\n        if(this.state.subcategories?.length === 0){\r\n            return;\r\n        }\r\n\r\n        return(\r\n            <Row>\r\n                {this.state.subcategories?.map(this.singleCategorie)}\r\n            </Row>\r\n        );\r\n    }\r\n\r\n    private showArticles(){\r\n        if(this.state.articles?.length === 0){\r\n            return(\r\n                <div>Nemamo artikala za ponuditi za ovu kategoriju!</div>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <Row>\r\n                {this.state.articles?.map(this.singleArticle)}\r\n            </Row>\r\n        );\r\n    }\r\n\r\n    private singleCategorie(subCategory: CategoryType){\r\n\r\n        return(\r\n            <Col lg=\"3\" md=\"4\" sm=\"6\" xs=\"12\">\r\n              <Card>\r\n                <Card.Body>\r\n                  <Card.Title>\r\n                    {subCategory.name}\r\n                  </Card.Title>\r\n                  <Link to={`/category/${subCategory.categoryId}`} className=\"btn btn-primary btn-block btn-sm\"> Open category </Link>\r\n                </Card.Body>\r\n              </Card>\r\n            </Col>);\r\n    }\r\n\r\n    private singleArticle(article: ArticleType){\r\n        return(\r\n            <SingleArticlePreview article={article}></SingleArticlePreview>\r\n        );\r\n    }\r\n\r\n    private printFeatureFilterComponent(component: { featureId: number; name: string; values: string[]; }){\r\n\r\n        return(\r\n            <Form.Group>\r\n                <Form.Label><strong>{component.name}</strong></Form.Label>\r\n                {\r\n                    component.values.map(value => {\r\n                       return(<Form.Check value={value} label={value} type=\"checkbox\" data-feature-id={component.featureId}\r\n                       onChange={(e) => this.featureFilterChanged(e as any)}></Form.Check>); \r\n                    })\r\n                }\r\n            </Form.Group>\r\n        );\r\n    }\r\n\r\n    componentDidUpdate(oldProperties: CategoryPageProperties) {\r\n        if (oldProperties.match.params.id === this.props.match.params.id) {\r\n            return;\r\n        }\r\n\r\n        this.getCatData();\r\n    }\r\n}","C:\\Users\\DT User6\\Desktop\\MT JS\\nest projekat\\front-end\\src\\UserLoginPage\\UserLoginPage.tsx",[],"C:\\Users\\DT User6\\Desktop\\MT JS\\nest projekat\\front-end\\src\\api\\api.tsx",["66","67"],"import axios, { AxiosRequestConfig, AxiosResponse } from 'axios';\r\nimport { ApiConfig } from '../config/ApiConfig';\r\n\r\nexport default function api(path: string, method: 'get' | 'post' | 'put' | 'patch' | 'delete', body: any | undefined){\r\n\r\n    return new Promise<ApiResponse>((resolve) => {\r\n        \r\n        const requestData: AxiosRequestConfig = {\r\n            method: method,\r\n            url: path,\r\n            baseURL: ApiConfig.API_URL,\r\n            data: JSON.stringify(body),\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': getToken()            }\r\n        };\r\n\r\n        axios(requestData)\r\n        .then(res => responseHandler(res, resolve))\r\n        .catch(async err => {\r\n   \r\n            console.log(requestData.data);\r\n\r\n            const response: ApiResponse = {\r\n                status: 'error',\r\n                data: err\r\n            };\r\n\r\n            return resolve(response);\r\n        });\r\n    });\r\n    \r\n}\r\n\r\nfunction getToken(): string{\r\n    const token = localStorage.getItem('api_token');\r\n    return 'Berer ' + token;\r\n}\r\n\r\nexport function saveToken(token: string): void{\r\n    localStorage.setItem('api_token', token)\r\n}\r\n\r\nfunction getRefreshtoken(): string{\r\n    const token = localStorage.getItem('api_refresh_token');\r\n    return token + '';\r\n}\r\n\r\nexport function saveRefreshToken(token: string): void{\r\n    localStorage.setItem('api_refresh_token', token)\r\n}\r\n\r\nasync function responseHandler(res: AxiosResponse<any>, resolve: (value: ApiResponse) => void){\r\n\r\n    if(res.status < 200 || res.status >= 300){\r\n\r\n        const response: ApiResponse = {\r\n            status: 'error',\r\n            data: res.data\r\n        };\r\n\r\n        return resolve(response);\r\n    }\r\n    \r\n    if(res.data.statusCode < 0){\r\n        const response: ApiResponse = {\r\n            status: 'ok',\r\n            data: res.data\r\n        };\r\n\r\n        return resolve(response);\r\n    }\r\n\r\n    const response: ApiResponse = {\r\n        status: 'ok',\r\n        data: res.data\r\n    };\r\n\r\n    return resolve(response)\r\n}\r\n\r\nexport interface ApiResponse{\r\n    status: 'ok' | 'error' | 'login';\r\n    data: any;\r\n}\r\n\r\nasync function refreshToken(): Promise<string | null>{\r\n\r\n    const path = 'auth/user/refresh';\r\n    const data = {\r\n        token: getRefreshtoken()\r\n    };\r\n\r\n    const refreshTokenRequestData: AxiosRequestConfig = {\r\n\r\n        method: 'post',\r\n        url: path,\r\n        baseURL: ApiConfig.API_URL,\r\n        data: JSON.stringify(data),\r\n        headers: {\r\n            'Content-Type': 'aplication/json'\r\n        }\r\n    }\r\n\r\n    const refreshTokenResponse: {data: {token: string | undefined } } = await axios(refreshTokenRequestData);\r\n\r\n    if(!refreshTokenResponse.data.token){\r\n        return null;\r\n    }\r\n\r\n    return refreshTokenResponse.data.token;\r\n\r\n}\r\n\r\nasync function repeatRequest(requestData: AxiosRequestConfig, resolve: (value: ApiResponse) => void){\r\n\r\n    axios(requestData).then(res =>{\r\n        if(res.status === 401){\r\n            const response: ApiResponse = {\r\n                status: 'login',\r\n                data: null\r\n            }\r\n            return resolve(response);\r\n        }\r\n\r\n        const response: ApiResponse = {\r\n            status: 'ok',\r\n            data: res\r\n        }\r\n\r\n        return resolve(response);\r\n    }).catch(err => {\r\n        const response: ApiResponse = {\r\n            status: 'error',\r\n            data: err\r\n        }\r\n        return resolve(response);\r\n    })\r\n}","C:\\Users\\DT User6\\Desktop\\MT JS\\nest projekat\\front-end\\src\\config\\ApiConfig.tsx",[],"C:\\Users\\DT User6\\Desktop\\MT JS\\nest projekat\\front-end\\src\\UserRegistrationPage\\UserRegistrationPage.tsx",[],"C:\\Users\\DT User6\\Desktop\\MT JS\\nest projekat\\front-end\\src\\SingleArticlePreview\\SingleArticlePreview.tsx",[],"C:\\Users\\DT User6\\Desktop\\MT JS\\nest projekat\\front-end\\src\\Cart\\CartPage.tsx",["68","69"],"import { faCartArrowDown, faMinusSquare, faTrashAlt } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport React from \"react\";\r\nimport { Alert, Button, Form, Modal, Nav, Table } from \"react-bootstrap\";\r\nimport api, { ApiResponse } from \"../api/api\";\r\nimport CartType from \"../Types/CartType\";\r\n\r\ninterface CartPageState {\r\n    quantity: number;\r\n    cart?: CartType;\r\n    visible: boolean;\r\n    message: string;\r\n}\r\n\r\nexport default class CartPage extends React.Component{\r\n    state: CartPageState;\r\n\r\n    constructor(props: Readonly<{}>){\r\n\r\n        super(props);\r\n\r\n        this.state = {\r\n            quantity: 1,\r\n            visible: false,\r\n            message: ''\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.updateCart();\r\n        window.addEventListener('cart.update', () => this.updateCart());\r\n    }\r\n\r\n    componentWillMount(){\r\n        window.removeEventListener('cart.update', () => this.updateCart());\r\n    }\r\n\r\n    private setStateCart(newCart?: CartType){\r\n        this.setState(Object.assign(this.state, {cart: newCart}));\r\n    }\r\n\r\n    private setStateQuantity(newQuantity: number){\r\n        this.setState(Object.assign(this.state, {quantity: newQuantity}));\r\n    }\r\n\r\n    private setStateVisible(state: boolean){\r\n        this.setState(Object.assign(this.state, {visible: state}));\r\n    }\r\n\r\n    private setStateMessage(message: string){\r\n        this.setState(Object.assign(this.state, {\r\n            message: message\r\n        }));\r\n    }\r\n\r\n    private showCart(){\r\n        this.setStateVisible(true);\r\n    }\r\n\r\n    private hideCart(){\r\n        this.setStateVisible(false);\r\n        this.setStateMessage('');\r\n    }\r\n\r\n    private updateCart(){\r\n        api('/api/user/cart', 'get', {}).then((res: ApiResponse) => {\r\n            if(res.status === 'error' || res.status === 'login'){\r\n                this.setStateQuantity(0);\r\n                this.setStateCart(undefined);\r\n                return;\r\n            }\r\n\r\n            this.setStateCart(res.data);\r\n            this.setStateQuantity(res.data.cartArticles.length);\r\n        });\r\n    }\r\n\r\n    private updateQuantity(event: React.ChangeEvent<HTMLInputElement>){\r\n        \r\n        const articleId = event.target.dataset.articleId;\r\n        const value = event.target.value;\r\n\r\n        const data = {\r\n            articleId: Number(articleId),\r\n            quantity: Number(value)\r\n        }\r\n\r\n        this.manageCart(data);\r\n    }\r\n\r\n    private manageCart(data: {articleId: number; quantity: number;}){\r\n        \r\n        api('/api/user/cart/', 'patch', data).then((res: ApiResponse) =>{\r\n           \r\n            if(res.status === 'error' || res.status === 'login'){\r\n                this.setStateQuantity(0);\r\n                this.setStateCart(undefined);\r\n                return;\r\n            }\r\n\r\n            this.setStateCart(res.data);\r\n            this.setStateQuantity(res.data.cartArticles.length);\r\n        });\r\n    }\r\n\r\n    private deleteFromCart(articleId: number){\r\n\r\n        const data = {\r\n            articleId: articleId,\r\n            quantity: 0\r\n        }\r\n\r\n        this.manageCart(data);\r\n    }\r\n\r\n    private makeAnOrder(){\r\n        api('/api/user/cart/makeAnOrder', 'post', {}).then((res:ApiResponse) => {\r\n            if(res.status === 'error' || res.status === 'login'){\r\n                this.setStateQuantity(0);\r\n                this.setStateCart(undefined);\r\n                return;\r\n            }\r\n\r\n            this.setStateMessage('Your order has been made.\\nCongrats');\r\n\r\n            this.setStateCart(undefined);\r\n            this.setStateQuantity(0);\r\n        });\r\n    }\r\n    \r\n    private calculateSumm(): number{\r\n     \r\n        let summ: number = 0;\r\n\r\n        if(typeof this.state.cart == undefined){\r\n            return summ;\r\n        }else{\r\n\r\n            this.state.cart?.cartArticles.map(item => {\r\n                summ += item.article.articlePrices[item.article.articlePrices.length - 1].price * item.quantity;\r\n            });\r\n        }\r\n        return summ;\r\n    }\r\n\r\n    private showInTable(){\r\n        return(\r\n            <Table hover size=\"sm\">\r\n                <thead>\r\n                    <tr>\r\n                        <th>Category</th>\r\n                        <th>Article</th>\r\n                        <th>Quantity</th>\r\n                        <th>Price</th>\r\n                        <th>Total</th>\r\n                        <th></th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {this.state.cart?.cartArticles.map(item => {\r\n                        return(\r\n                            <tr>\r\n                                <td>{item.article.category.name}</td>\r\n                                <td>{item.article.name}</td>\r\n                                <td><Form.Control type=\"number\" data-article-id={item.article.articleId} value={Number(item.quantity)}\r\n                                 min=\"1\" step=\"1\" onChange={(e) => this.updateQuantity(e as any)} className=\"text-center\"></Form.Control></td>\r\n                                <td>{Number(item.article.articlePrices[item.article.articlePrices.length - 1].price).toFixed(2)} Eur</td>\r\n                                <td>{Number(item.article.articlePrices[item.article.articlePrices.length - 1].price * item.quantity).toFixed(2)} Eur</td>\r\n                                <td><FontAwesomeIcon icon={faTrashAlt} onClick={() => this.deleteFromCart(item.articleId)} style={{cursor: \"pointer\"}}></FontAwesomeIcon></td>\r\n                            </tr>\r\n                        );\r\n                    }, this)}\r\n                </tbody>\r\n                <tfoot>\r\n                    <tr>\r\n                        <td>Total</td>\r\n                        <td className=\"text-right\">{Number(this.calculateSumm()).toFixed(2)} Eur</td>\r\n                        <td></td>\r\n                        <td></td>\r\n                        <td></td>\r\n                        <td></td>\r\n                    </tr>\r\n                </tfoot>\r\n                \r\n            </Table>\r\n        );\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <>\r\n            <Nav.Item>\r\n                <Nav.Link active={false} onClick={() => this.showCart()}>\r\n                    <FontAwesomeIcon icon={faCartArrowDown}></FontAwesomeIcon> ({this.state.quantity})\r\n                </Nav.Link>\r\n            </Nav.Item>\r\n            <Modal size=\"lg\" centered show={this.state.visible} onHide={() => this.hideCart()}>\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>\r\n                        Your shoping cart\r\n                    </Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                        {this.showInTable()}\r\n                        <Alert variant='success' className={this.state.message ? '': 'd-none'}>{this.state.message}</Alert>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button variant=\"primary\" onClick={() => this.makeAnOrder()} disabled={this.state.cart?.cartArticles.length === 0}>Make an order</Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n            \r\n            \r\n            </>\r\n        );\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n}","C:\\Users\\DT User6\\Desktop\\MT JS\\nest projekat\\front-end\\src\\OrderPage\\OrderPage.tsx",["70"],{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","replacedBy":"74"},{"ruleId":"75","severity":1,"message":"76","line":2,"column":36,"nodeType":"77","messageId":"78","endLine":2,"endColumn":43},{"ruleId":"75","severity":1,"message":"79","line":9,"column":10,"nodeType":"77","messageId":"78","endLine":9,"endColumn":19},{"ruleId":"75","severity":1,"message":"80","line":87,"column":16,"nodeType":"77","messageId":"78","endLine":87,"endColumn":28},{"ruleId":"75","severity":1,"message":"81","line":115,"column":16,"nodeType":"77","messageId":"78","endLine":115,"endColumn":29},{"ruleId":"75","severity":1,"message":"82","line":1,"column":27,"nodeType":"77","messageId":"78","endLine":1,"endColumn":40},{"ruleId":"83","severity":1,"message":"84","line":139,"column":52,"nodeType":"85","messageId":"86","endLine":139,"endColumn":54},{"ruleId":"75","severity":1,"message":"87","line":1,"column":28,"nodeType":"77","messageId":"78","endLine":1,"endColumn":38},"no-native-reassign",["88"],"no-negated-in-lhs",["89"],"@typescript-eslint/no-unused-vars","'CardImg' is defined but never used.","Identifier","unusedVar","'ApiConfig' is defined but never used.","'refreshToken' is defined but never used.","'repeatRequest' is defined but never used.","'faMinusSquare' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'faTrashAlt' is defined but never used.","no-global-assign","no-unsafe-negation"]